<!-- JQ -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<!-- AXIOS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.25.0/axios.min.js"
    integrity="sha512-/Q6t3CASm04EliI1QyIDAA/nDo9R8FQ/BULoUFyN4n/BDdyIxeH7u++Z+eobdmr11gG5D/6nPFyDlnisDwhpYA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- BS5 / POPPER -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.1/dist/umd/popper.min.js"
    integrity="sha384-W8fXfP3gkOKtndU4JGtKDvXbO53Wy8SZCQHczT5FMiiqmQfUpWbYdTil/SxwZgAN"
    crossorigin="anonymous"></script>
<!-- BS5 / JS Plugin -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.min.js"
    integrity="sha384-skAcpIdS7UcVUC05LJ9Dxay8AXcDYfBJqt1CJ85S/CFujBsIzCIv+l9liuYLaMQ/"
    crossorigin="anonymous"></script>
<!-- 自訂義 -->
<!-- 處理錯誤 -->
<script src="http://34.81.0.246:8080/js/errRes.js"></script>
<!-- BackDrop -->
<script>
    const CONF = {
        DEBOUNCE: {
            ms: 250,
            auto: false
        }
    }
    /* 配置 axios 的 請求攔截器，統一處理報錯 */
    axios.interceptors.request.use(
        (config) => {
            loading()
            return config
        },
        error => { throw error }
    )
    /* 配置 axios 的 響應攔截器，統一處理報錯 */
    axios.interceptors.response.use(
        response => {
            let { config: { url }, data: { errno, data } } = response
            let res = response.data
            if (errno === ErrRes.PERMISSION.NO_LOGIN.errno) {
                res = { errno, data: { me: {} } }
            }
            loadEnd()
            return Promise.resolve(res)
        },
        error => {
            /* axios 結果一律以 resolve 方式處理，響應都會是 { errno, data || msg } 方式呈現*/
            return errHandle(error)
        }
    )
    function errHandle(error) {
        let { data: { errno, msg } } = error.response
        let redir
        if (errno === ErrRes.PERMISSION.NO_LOGIN.errno) {
            redir = `/login?from=${encodeURIComponent(location.href)}`
        } else {
            redir = `/errPage?errno=${encodeURIComponent(errno)}&msg=${encodeURIComponent(msg)}`
        }
        alert(msg)
        location.href = redir
        return Promise.reject()
    }
    //  utils ------
    let { loading, loadEnd } = genBackdrop()
    Object.defineProperties(window, {
        loading: { value: loadEnd },
        loadEnd: { value: loading },
        genDebounce: { value: genDebounce },
        show: { value: show }
    })
    window.loading = loading
    window.loadEnd = loadEnd
    /* 顯示/隱藏 讀取遮罩 的 工廠函數 */
    function genBackdrop() {
        let originalEnableInps = []
        return {
            loading(editorList = []) {
                /*
                頁面讀取中，禁止任何點擊、tab獲取焦點
                */
                $('.backdrop').removeClass('my-noshow')
                //  顯示 backdrop
                $('*').on('keydown', EventPrevent)
                //  取消任何鍵盤可能發生的默認行為，這裡主要是要取消 tab 選取
                $('body').css('pointer-events', 'none')
                //  取消頁面任何點擊行為
                for (let input of $('input')) {
                    /* 防止 input 觸發 */
                    let $input = $(input)
                    if ($input.prop('disabled')) {
                        continue
                    }
                    $input.prop('disabled', true)
                    //  限制原本可運作的 input
                    originalEnableInps.push($input)
                    //  納入管理    
                }
                editorList.forEach(editor => editor.disable())
                //  防止 editor 被觸發
            },
            loadEnd(editorList = []) {
                /*
                頁面讀取結束，允許點擊、tab獲取焦點
                */
                $('.backdrop').addClass('my-noshow')
                //  隱藏 backdrop
                $('*').off('keydown', EventPrevent)
                //  允許任何鍵盤可能發生的默認行為，這裡主要是要取消 tab 選取
                $('body').css('pointer-events', 'auto')
                //  允許頁面任何點擊行為
                for (let $input of originalEnableInps) {
                    $input.prop('disabled', false)
                }
                originalEnableInps = []
                //  清空要被禁止的input
                editorList.forEach(editor => editor.enable())
                //  允許 editor 被觸發
            }
        }
        function EventPrevent(e) {
            /* 取消任何鍵盤可能發生的默認行為，這裡主要是要取消 tab 選取 */
            e.preventDefault()
        }
    }
    /* 防抖動 的 工廠函數  */
    function genDebounce(fn, config = {}) {
        /* 防抖動的函數工廠 */
        let {
            ms = CONF.DEBOUNCE.ms,
            auto = CONF.DEBOUNCE.auto
        } = config
        let timeSet
        //  setTimeout 標記
        let debounce = () => {
            if (timeSet) {
                /* 取消上一次的 setTimeout */
                clearTimeout(timeSet)
            }
            timeSet = setTimeout(async function () {
                /* 延遲調用fn，且調用完畢後自動再作一次延遲調用 */
                await fn()
                if (auto) {
                    debounce(fn, ms)
                }
            }, ms)
        }
        return debounce
    }
    /* 隱藏/顯示 */
    function show(q, boo = true) {
        return $(q).toggleClass('my-show', boo).toggleClass('my-noshow', !boo)
    }

</script>