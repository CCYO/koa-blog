<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Register/Login</title>

  <!-- BS5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">

  <%- include('wedgets/navbar/navbar-css') %>

  <style>
    .loading {
      color: blue
    }
  </style>
</head>

<body>
  <!-- 主導覽 -->
  <%- include('wedgets/navbar/navbar') %>

  <!-- 註冊/登入 互動卡片-->
  <div class="card w-50 mx-auto" style='margin-top: 4rem;'>
    <!-- 卡片頭部 -->
    <div class="card-header">
      <!-- 頭部導行列-->
      <ul class="card-header-tabs nav nav-tabs">
        <!-- 頭部導行項-->
        <li class="nav-item">
          <a class="nav-link <%= active === 'register' ? `active` : `` %>" href="#" data-bs-toggle='tab'
            data-bs-target='#register-box' role="tab" aria-controls="register" aria-selected="true">註冊</a>
        </li>
        <li class="nav-item">
          <a class="nav-link <%= active === 'login'  ? `active` : `` %>" href="#" data-bs-toggle='tab'
            data-bs-target='#login-box' role="tab" aria-controls="login" aria-selected="false">登入</a>
        </li>
      </ul>
    </div>
    <!-- 卡片主體 -->
    <div class="card-body tab-content">
      <div class="tab-pane fade <%= active === 'register' ? `show active` : ``%>" role="tabpanel"
        aria-labelledby="register-tab" id="register-box">
        <form id='form-register' class="row">
          <div class="col-8 mx-auto">
            <div class="mb-3">
              <label for="email" class="form-label">信箱</label>
              <input type="text" class="form-control" name="email" aria-describedby="email_help" autocomplete="off"
                required>
              <div class="d-block">&nbsp;</div>
            </div>
            <div class="mb-3">
              <label for="input_password" class="form-label">密碼</label>
              <input type="password" class="form-control" name="input_password" data-retry='yes'
                autocomplete="new-password" required>
              <div class="d-block">&nbsp;</div>
            </div>
            <div class="mb-3">
              <label for="input_check_password" class="form-label">密碼確認</label>
              <input type="password" class="form-control" name='input_check_password' autocomplete="off" disabled>
              <div class="d-block">&nbsp;</div>
            </div>
            <button type="submit" class="btn btn-primary" disabled>送出</button>
          </div>
        </form>
      </div>
      <div class="tab-pane fade <%= active === 'login'  ? `show active` : ``%>" id="login-box" role="tabpanel"
        aria-labelledby="login-tab">
        <form id='form_login' class="row">
          <div class="col-8 mx-auto">
            <div class="mb-3">
              <label for="input_email" class="form-label">信箱</label>
              <input type="text" class="form-control" name="input_email" data-form-id='#form_login' autocomplete="off"
                required aria-describedby="email_help">
              <div class="d-block">&nbsp;</div>
            </div>
            <div class="mb-3">
              <label for="input_password" class="form-label">密碼</label>
              <input type="password" class="form-control" name="input_password" data-form-id='#form_login'
                autocomplete="new-password">
              <div class="d-block">&nbsp;</div>
            </div>
            <button type="submit" class="btn btn-primary" disabled>送出</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <%- include('wedgets/cdn') %>
  <%- include('wedgets/navbar/navbar-js')  %>

  <script>
    $(function () {
      // //  selector__ 對應 selector
      // const selector__form_register = '#form_register'
      // const selector__form_login = '#form_login'
      // const selector__inp_email = `input[name='input_email']`
      // const selector__inp_password = `input[name='input_password']`
      // const selector__inp_check_password = `input[name='input_check_password']`
      // let selector__feedback_check_password = `${selector__inp_check_password} ~ div`

      // //  $ 對應 ele
      // const $check_password = $(selector__inp_check_password)
      // const $feedback_check_password = $(selector__feedback_check_password)

      /*  BS5 Tab : Register & Login */

      //  手動註冊的 BS5 Tab 列表
      let BS5_tabs = []

      //  手動註冊 BS5 Tab
      $(`.card .nav-link`).each((ind, tab) => {
        //  手動註冊 tab
        const tabTrigger = new bootstrap.Tab(tab)

        //  show.bs.tab 當 tab 內容顯示時
        tab.addEventListener('show.bs.tab', (e) => {
          //  .card .nav-link - 選擇卡的選項群組
          //  #my-navbar-header-register .nav-link - navbar 的 login/register 選項群組
          $(`.card .nav-link, #my-navbar-header-register .nav-link`).each((ind, nav) => {
            $(nav).toggleClass('active')
          })
        })
        BS5_tabs.push(tabTrigger)
      })

      $(`#register-box [name='email']`).on('change', async (e) => {
        let target = $(e.target)
        let email = target.val()
        let feedback = target.next()

        if (!email) {
          console.log('空')
          UI(false, '請填入信箱資訊')
          return
        }


        let { data: { errno, data, msg } } = await axios.post('/api/user/isEmailExist', { email })

        if (!errno) {
          console.log('成功')
          UI(true, data)
        } else {
          console.log('失敗')
          msg = Array.isArray(msg) ? msg[0].message : msg
          UI(false, msg)
        }

        function UI(valid, data) {
          if (valid) {
            target.removeClass('is-invalid').addClass('is-valid')
            feedback.removeClass('invalid-feedback').addClass('valid-feedback').text(data)
          } else {
            target.removeClass('is-valid').addClass('is-invalid')
            feedback.removeClass('valid-feedback').addClass('invalid-feedback').text(data)
          }
          return
        }

        function UI_submit() {

        }

        function form_valid_UI(form) {
          function email_UI() {
            $(`[name='email']`).each((index, inp) => {
              let email = inp.val()

            })
          }
          function require_UI(val) {
            if (val === '') {

            }
          }
          function feedback_UI(inp, valid, msg) {
            if (valid) {
              inp.removeClass('is-invalid').addClass('is-valid')
              $(inp).next().removeClass('invalid-feedback').addClass('valid-feedback').text(data)
            } else {
              inp.removeClass('is-valid').addClass('is-invalid')
              $(inp).next().removeClass('valid-feedback').addClass('invalid-feedback').text(data)
            }
          }
        }
      })



      //  GenericFuc: validate UI for form
      // function _form_UI(selector__form) {
      //   return (selector, empty, invalid) => {
      //     const selector__inp = `${selector__form} ${selector}`
      //     const selector__feedback = `${selector__inp} ~ div`
      //     const selector__submit = `${selector__form} button[type='submit']`

      //     const $inp = $(selector__inp)
      //     const $feedback = $(selector__feedback)
      //     const $submit = $(selector__submit)

      //     const success = !empty && !invalid

      //     const _submit_UI = () => {
      //       const can_submit = $$(`${selector__form} .is-valid`).length === $$(`${selector__form} input`).length
      //       if (!can_submit) {
      //         $submit.setAttribute('disabled', true)
      //       } else {
      //         $submit.removeAttribute('disabled')
      //       }
      //     }

      //     const _input_UI = (_success, empty, invalid) => {
      //       let remove_class_input = !success ? 'is-valid' : 'is-invalid'
      //       let add_class_ = success ? 'is-valid' : 'is-invalid'
      //       let remove_class_feedback = !success ? 'valid-feedback' : 'invalid-feedback'
      //       let add_class_feedback = success ? 'valid-feedback' : 'invalid-feedback'

      //       $inp.classList.remove(`${remove_class_input}`)
      //       $inp.classList.add(`${add_class_}`)
      //       $feedback.classList.remove(remove_class_feedback)
      //       $feedback.classList.add(add_class_feedback)

      //       if (!_success) {
      //         if (empty) {
      //           $feedback.innerHTML = `必填，且必須是數字或大小寫英文字母`
      //         } else if (invalid) {
      //           $feedback.innerHTML = `${invalid}`
      //         }
      //       } else {
      //         $feedback.innerHTML = `ok`
      //       }
      //       _submit_UI()
      //       return
      //     }
      //     _input_UI(success, empty, invalid)
      //   }
      // }

      // //  form_UI_register
      // const form_UI_register = _form_UI(selector__form_register)

      // //  form_UI_login
      // const form_UI_login = _form_UI(selector__form_login)

      // const validate_email = async (e) => {
      //   console.log('進入驗證')
      //   const $target = e.target

      //   let form_id = $target.dataset['formId']
      //   const $feedback = $(`${form_id} ${selector__inp_email} ~ div`)

      //   //  判斷使用 register || login 的 UI驗證
      //   const form_UI = (form_id = form_id === '#form_register') ? form_UI_register : form_UI_login

      //   const email = $target.value
      //   const regex_email = /^[\w]+@[\w\.]+$/
      //   if (!email) {
      //     //  無值
      //     form_UI(selector__inp_email, true)
      //     return
      //   } else if (!(regex_email.exec(email))) {
      //     //  格式錯誤
      //     form_UI(selector__inp_email, false, '必須由數字或英文字母組成')
      //     return
      //   }

      //   //  格式驗證成功
      //   if (form_id) {
      //     //  若是 register_input_email
      //     //  添加 loading 樣式
      //     $target.classList.remove('is-valid', 'is-invalid')
      //     $feedback.classList.add('loading')
      //     $feedback.innerHTML = 'LOADING...'

      //     //  AJAX
      //     let {
      //       data: {
      //         errno,
      //         msg = undefined,
      //         data = undefined
      //       }
      //     } = await axios.post('/api/user/isEmailExist', { email })

      //     //  AJAX結束，移除 loading 樣式
      //     $feedback.classList.remove('loading')

      //     if (errno) {
      //       //  DB驗證失敗
      //       form_UI_register(selector__inp_email, false, msg)
      //       return
      //     } else {
      //       //  DB驗證成功
      //       form_UI_register(selector__inp_email)
      //       return
      //     }
      //   } else {
      //     //  若是 login_input_email
      //     form_UI(selector__inp_email)
      //   }
      // }


      // // 驗證 register email 是否已存在
      // $$(`${selector__inp_email}`).forEach(
      //   inp => inp.addEventListener(
      //     'input',
      //     validate_email
      //   )
      // )

      // //  handle 密碼格式
      // const validate_password = (e) => {
      //   const $target = e.target

      //   const password = $target.value
      //   let form_id = $target.dataset['formId']

      //   let form_UI = (form_id = form_id === '#form_register') ? form_UI_register : form_UI_login
      //   let retry = form_id ? $target.dataset['retry'] : 'no'

      //   if (retry === 'yes') {
      //     $target.dataset['retry'] = 'no'
      //     $check_password.value = ''
      //     $check_password.classList.remove('is-valid', 'is-invalid')
      //     $feedback_check_password.innerHTML = '&nbsp;'
      //   }

      //   if (!password) {
      //     //  無效，密碼為空
      //     form_id && $check_password.setAttribute('disabled', true) && console.log(123456)
      //     form_UI(selector__inp_password, true)
      //     return
      //   } else if (!(/^[\w]+$/.exec(password))) {
      //     //  無效，密碼格式錯誤
      //     form_UI(selector__inp_password, false, '密碼必須由數字或英文字母組成')
      //     form_id && $check_password.setAttribute('disabled', true)
      //     return
      //   } else {
      //     //  有效
      //     if (form_id) {
      //       if ($check_password.hasAttribute('disabled')) {
      //         $check_password.removeAttribute('disabled')
      //       }
      //     }
      //     form_UI(selector__inp_password)
      //     return
      //   }
      // }

      // // form_register 與 form_login 的 inp_password 都需綁定
      // $$(`${selector__inp_password}`).forEach(inp => {
      //   inp.addEventListener('input', validate_password)
      // })

      // //  form_register 的 inp_password 更改 password 時，checkout_password 的 UI變化
      // $(`${selector__form_register} ${selector__inp_password}`).addEventListener(
      //   'blur',
      //   e => {
      //     e.target.dataset['retry'] = 'yes'
      //   })

      // //  handle 密碼二次
      // const handle_checkout_password = (e) => {
      //   const $password = $(`${selector__form_register} ${selector__inp_password}`)
      //   const password = $password.value
      //   const check_password = $check_password.value

      //   const valid = password === check_password

      //   if (!valid) {
      //     form_UI_register(selector__inp_check_password, false, '請確認兩次密碼都是一樣的')
      //   } else {
      //     form_UI_register(selector__inp_check_password)
      //   }
      //   return
      // }

      // $check_password.addEventListener(
      //   'input',
      //   handle_checkout_password
      // )

      // //  送出註冊資料
      // $(selector__form_register).addEventListener(
      //   'submit',
      //   async (e) => {
      //     e.preventDefault()
      //     const email = $(`${selector__form_register} ${selector__inp_email}`).value
      //     const password = $(`${selector__form_register} ${selector__inp_password}`).value
      //     const {
      //       data: {
      //         errno,
      //         msg = undefined,
      //         data = undefined
      //       }
      //     } = await axios.post('/api/user/register', {
      //       email,
      //       password
      //     })
      //     if (errno) {
      //       alert(msg.message)
      //     } else {
      //       //window.userCredential = await _firebase.auth.create( email, password )
      //       alert('註冊成功，請嘗試登入')
      //       location.href = '/login'

      //     }
      //   })

      // //  送出登入資料
      // $(selector__form_login).addEventListener(
      //   'submit',
      //   async (e) => {
      //     e.preventDefault()
      //     const {
      //       data: {
      //         errno,
      //         msg = undefined,
      //         data = undefined
      //       }
      //     } = await axios.post('/api/user/', {
      //       email: $(`${selector__form_login} ${selector__inp_email}`).value,
      //       password: $(`${selector__form_login} ${selector__inp_password}`).value
      //     })
      //     if (errno) {
      //       alert(msg)
      //     } else {
      //       alert('登入成功')
      //       let from = location.search ? new URLSearchParams(location.search).get('from') : false
      //       location.href = from || '/self'
      //     }
      //   })
    })
  </script>
</body>

</html>