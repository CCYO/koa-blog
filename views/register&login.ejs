<!-- 主導覽： NAV_CSS + NAV第一層template + backdrop Ele -->
<%- include('wedgets/header') %>
  <style>
    .loading {
      color: blue
    }
  </style>


  <!-- 註冊/登入 互動卡片-->
  <div class="card w-50 mx-auto" style='margin-top: 4rem;'>
    <!-- 卡片頭部 -->
    <div class="card-header">
      <!-- 頭部導行列-->
      <ul class="card-header-tabs nav nav-tabs">
        <!-- 頭部導行項-->
        <li class="nav-item">
          <a class="nav-link <%= active === 'register' ? `active` : `` %>" href="#" data-my-tab="#register"
            data-bs-toggle='tab' data-bs-target='#register-box' role="tab" aria-controls="register"
            aria-selected="true">註冊</a>
        </li>
        <li class="nav-item">
          <a class="nav-link <%= active === 'login'  ? `active` : `` %>" href="#" data-my-tab="#login"
            data-bs-toggle='tab' data-bs-target='#login-box' role="tab" aria-controls="login"
            aria-selected="false">登入</a>
        </li>
      </ul>
    </div>
    <!-- 卡片主體 -->
    <div class="card-body tab-content">
      <div class="tab-pane fade <%= active === 'register' ? `show active` : ``%>" role="tabpanel"
        aria-labelledby="register-tab" id="register-box">
        <form id='form-register' data-my-type="register" class="row" autocomplete="do-not-autofill">
          <div class="col-8 mx-auto">
            <div class="mb-3">
              <label for="email" class="form-label">信箱</label>
              <input type="email" class="form-control" name="email" aria-describedby="email_help" autocomplete="off"
                required>
              <div class="d-block">&nbsp;</div>
            </div>
            <div class="mb-3">
              <label for="input_password" class="form-label">密碼</label>
              <input type="password" class="form-control" name="password" data-retry='yes' autocomplete="new-password"
                required>
              <div class="d-block">&nbsp;</div>
            </div>
            <div class="mb-3">
              <label for="input_check_password" class="form-label">密碼確認</label>
              <input type="password" class="form-control" name='password_again' autocomplete="off">
              <div class="d-block">&nbsp;</div>
            </div>
            <button type="submit" class="btn btn-primary">送出</button>
          </div>
        </form>
      </div>
      <div class="tab-pane fade <%= active === 'login'  ? `show active` : ``%>" id="login-box" role="tabpanel"
        aria-labelledby="login-tab">
        <form id='form_login' data-my-type="login" class="row" autocomplete="do-not-autofill">
          <div class="col-8 mx-auto">
            <div class="mb-3">
              <label for="email" class="form-label">信箱</label>
              <input type="email" class="form-control" name="email" data-form-id='#form_login' autocomplete="off"
                aria-describedby="email_help">
              <div class="d-block">&nbsp;</div>
            </div>
            <div class="mb-3">
              <label for="password" class="form-label">密碼</label>
              <input type="password" class="form-control" name="password" data-form-id='#form_login'
                autocomplete="do-not-autofill">
              <div class="d-block">&nbsp;</div>
            </div>
            <button type="submit" class="btn btn-primary">送出</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <%- include('wedgets/cdn') %>
    <script type="module" defer>
      import validate from '/js/_validate.js'
      import initPageFn from '/js/initData.js'
      //  統整頁面數據、渲染頁面的函數
      import initNavbar from '/js/navbar.js'
      //  初始化 Navbar
      import initEJSData from '/js/initEJSData.js'
      //  初始化來自ejs在頁面上的字符數據
      try {
        loading()
        //  讀取中，遮蔽畫面
        let initPage = new initPageFn()
        await initPage.addOtherInitFn(initEJSData)
        //  初始化ejs
        await initPage.addOtherInitFn(initNavbar)
        //  初始化navbar
        await initPage.render(renderPage)
        //  統整頁面數據，並渲染需要用到統整數據的頁面內容
        loadEnd()
        //  讀取完成，解除遮蔽
      } catch (error) {
        throw error
        // location.href = `/errPage?errno=${encodeURIComponent('???')}&msg=${encodeURIComponent(error.message)}`
      }

      function renderPage() {
        const CONST = {
          REGISTER: {
            FORM: 'register',
            API: '/api/user/register',
          },
          LOGIN: {
            FORM: 'login',
            API: '/api/user',
          }
        }
        let $$validate = validate
        let $$payload = {
          login: {},
          register: {}
        }
        $('form[data-my-type=register] input[name=email]').on('input', handle_isEmailExist)
        $('form[data-my-type=register]').on('submit', handle_form(CONST.REGISTER))
        $('form[data-my-type=login]').on('submit', handle_form(CONST.LOGIN))
        async function handle_isEmailExist(e) {
          let el = e.target
          let form = $(el).parents('form')[0]
          let formType = form.dataset['myType']
          let datas = $$payload[formType]
          let inpVal = el.value
          datas.email = inpVal
          let validateRes = await $$validate.email(datas)
          if (validateRes) {
            let msg = validateRes['email']
            feedback_UI(el, false, msg)
            return
          }
          feedback_UI(el, true, '')
          el.focus()
        }
        function handle_form(ACTION) {
          return async function _(e){
            e.preventDefault()
            let ele = e.target
            let formType = ACTION.FORM
            let api = ACTION.API
            let form = document.querySelector(`form[data-my-type=${formType}]`)
            //  取得 formType
            let datas = $$payload[formType]
            let invalidInps = []
            //  存放無效值的inp
            let validInps = []
            //  存放有效值的inp
            let validate = $$validate[formType]
            if (e.type === 'input') {
              /* input 代表是由 input 觸發*/
              datas[ele.name] = ele.value
              //  更新$$datas內的表格數據
            } else {
              /* submit 代表是由 form 觸發，蒐集表單數據*/
              for (let inp of form) {
                console.log('@inp => ', inp)
                if (inp.type === 'submit' || (formType === 'register' && inp.name === 'email')) {
                  /* submit沒資料，email則有獨立handle*/
                  continue
                }
                datas[inp.name] = inp.value
                //  將表格數據存入$$datas
              }
            }
            let validateErrs = await validate(datas)
            //  驗證
            if (e.type === 'input') {
              /* 整理此次 input 影響的錯誤提醒，以及表格的綁定事件 */
              for (let inp of form) {
                let inputName = inp.name
                if (inp.type === 'submit' || (formType === 'register' && inputName === 'email')) {
                  /* 除了email，其有獨立的 handle*/
                  continue
                }
                if (!validateErrs || !validateErrs[inputName]) {
                  /* datas 整體有效 || datas[inpName] 當前屬性數據有效 */
                  validInps.push(inp)
                } else if (validateErrs[inputName]) {
                  invalidInps.push({ inp, msg: validateErrs[inputName] })
                }
              }
            } else if (validateErrs) {
              /* 若EventType不是input，且驗證結果有錯誤 */
              let inputNames = [...form].filter(inp => {
                return inp.type !== 'submit' && !(formType === 'register' && inp.name === 'email')
                //  撇除 email 與 submit
              }).map(inp => inp.name)
              //  僅取出 inputName
              let set_validInpName = new Set(inputNames)
              //  用來過濾出含有效值的inpName
              for (let inputName in validateErrs) {
                set_validInpName.delete(inputName)
                //  刪去無效值的inpName
                let inp = $(form).find(`input[name=${inputName}]`)[0]
                invalidInps.push({ inp, msg: validateErrs[inputName] })
              }
              for (let inpName of set_validInpName) {
                /* 針對通過驗證的 inpName 進行處理*/
                let inp = $(form).find(`input[name=${inpName}]`)[0]
                validInps.push(inp)
              }
            } else {
              /* 若 eventType != input，且表單都是有效數據，發送 register 請求 */
              let { errno, msg } = await axios.post(api, datas)
              if (!errno) {
                if (formType === 'login') {
                  alert('登入成功')
                  let from = location.search ? new URLSearchParams(location.search).get('from') : false
                  location.href = from ? from : '/self'
                } else {
                  alert('註冊成功，請嘗試登入')
                  location.pathname = '/login'
                }
              } else {
                alert(msg)
                $(form)[0].reset()
                datas = {}
                feedback_UI(false)
              }
              return
            }
            for (let inp of validInps) {
              feedback_UI(inp, true, '')
            }
            for (let { inp, msg } of invalidInps) {
              feedback_UI(inp, false, msg)
              inp.removeEventListener('input', _)
              inp.addEventListener('input', _)
            }
            return
          }
        }
        //  input 的 valicate UI
        function feedback_UI(inp, valid, msg) {
          if (inp === false) {
            for (let form of $('form')) {
              for (let inp of form) {
                $(inp).removeClass('is-invalid is-valid')
                $(inp).next().removeClass('invalid-feedback valid-feedback myshow').text('')
              }
            }
          } else if (valid === 'load') {
            //  驗證中
            $(inp).next().toggleClass('my-show', true).text('loading...')
          } else if (valid) {
            //  驗證成功
            $(inp).removeClass('is-invalid').addClass('is-valid')
            $(inp).next().removeClass('invalid-feedback myshow').addClass('valid-feedback').text(msg)
          } else {
            //  驗證失敗
            $(inp).removeClass('is-valid').addClass('is-invalid')
            $(inp).next().removeClass('valid-feedback myshow').addClass('invalid-feedback').text(msg)
          }
        }
      }
    </script>
    </body>

    </html>