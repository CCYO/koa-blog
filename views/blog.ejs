<%- include('wedgets/common/header') %>

<body>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@300&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://www.wangeditor.com/demo/css/view.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
    <style>
        .editor-container {
            border: 1px solid;
            height: 20vh;

        }

        .editor-content-view {
            background-color: rgba(255, 200, 200, .5);
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .editor-content-view p img {
            max-width: 100%;
        }

        #backdrop {
            position: fixed;
            z-index: 1000;
            /* height: 100%;
            width: 100%; */
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background: rgba(200, 200, 200, 0.5);
        }

        .comment-item {
            padding: 2%;
            border: 1px solid;
        }
    </style>
    <%- include('wedgets/navbar/index') %>
    <div id="backdrop"></div>
    <div class="container pt-2 pb-2">
        <div>
            <h1> <%= blog.title %> </h1>
            <div class="editor-content-view">
                <%- blog.html %>
            </div>
        </div>
        <% if (blog.show) { %>
        <div id="comment" class="editor-comment">
            <div class="editor-container"></div>
            <div class="container-comment-list">
                <div class="comment-list">
                    <% if(blog.comments.length){ %>
                    <%- include('./wedgets/comment/reply-list', { comments: blog.comments }) %>
                    <% } %>
                </div>
            </div>
        </div>
        <% } %>
    </div>
    <%- include('wedgets/cdn') %>
    <!-- 引入 editor css -->
    <link href="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/css/style.css" rel="stylesheet">
    <!-- 引入 editor js -->
    <script src="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/index.min.js"></script>
    <script>
        console.log('blog ejs - script 行內代碼運行 ')

        $(async function () {
            console.log('blog ejs - script onload 運行')
            try {
                if (!window.data.blog.show) {
                    return
                }
                await init()
                $('#backdrop').addClass('my-noshow')
            } catch (e) {
                console.log('@ GET ERR => ', e)
            }

            async function init() {
                //  將comment Map化
                mapComments(window.data.blog.comments)
                let selector = '.editor-container'
                // 初始化editor
                let editor = init_editor(selector)
                let $el = $(selector)
                $el.on('keyup', handle_keyup(editor))
                let $btn = $('button.reply')
                $btn.on('click', initReplyEditor)
            }

            function initReplyEditor(e) {
                let $target = $(e.target)
                let $el_editor = $target.next('.editor-reply')
                let editor = $el_editor[0].editor || undefined
                if (editor) {
                    $el_editor.show()
                    editor.focus()
                    console.log('僅顯示')
                    return
                }
                editor = init_editor($el_editor[0], {
                    onBlur() {
                        $el_editor.hide()
                    }

                })
                $el_editor[0].editor = editor
                window.aa = editor
                $el_editor.attr('tabindex', 0)
                $el_editor.on('keyup', handle_keyup(editor))
            }

            let api_comment = '/api/comment'

            function handle_keyup(editor) {
                return async (e) => {
                    let isEnter = e.key === 'Enter'
                    if ((e.shiftKey && isEnter) || !isEnter) {
                        return
                    }
                    let $target = $(e.target)
                    let htmlStr = editor.getHtml()
                    let reg = /(<p><br><\/p>)|(<p>[\s&nbsp;]+<\/p>)/g
                    let str = htmlStr.replace(reg, '')
                    if (!str.trim()) {
                        editor.setHtml()
                        alert('請填入留言')
                        return
                    }

                    let pid = $target.parents('[data-my-pid]').first().data('myPid')
                    if (!pid) {
                        pid = 0
                    }
                    let { data: { errno, data, msg } } = await postComment(htmlStr, pid)

                    if (errno) {
                        alert('留言失敗')
                        console.log('msg')
                        return
                    }

                    let { id, p_id, html, time, user } = data
                    delete data.createdAt
                    renderComment(data, $target)
                    updateComment(data)
                    editor.setHtml()
                    console.log('ok')
                }
            }

            function updateComment(comment) {
                let { id, p_id, html, time, user } = comment
                let commentId = window.map.commentId
                let commentPid = window.map.commentPid
                commentPid.set(id, [])
                let pidList = commentPid.get(p_id)
                if (!p_id) {  //文章回覆
                    pidList.unshift(comment)
                } else {  //留言回覆
                    pidList.push(comment)
                }
                commentPid.set(p_id, pidList)
                commentId.set(id, comment)
            }

            function renderComment({ id, p_id, html, time, user }, $target) {
                let template = templateComment({ id, html, time, user })
                let $comment
                if (!p_id) {  //  文章留言
                    //  渲染
                    $comment = $('.container-comment-list > .comment-list').prepend(template).children('.comment-item').first()
                } else { // 留言回覆
                    $comment = $target.parents('[data-my-pid]').next().append(template).children().last()
                }
                $comment.children('.reply').on('click', initReplyEditor)
            }

            function templateComment({ id, html, time, user }) {
                return `
                    <div class="comment-item">
                        ${html}
                        <a href="/other/${user.id}">${user.nickname}</a>
                        <span>${time}</span>
                        <button class="reply">回覆</button>
                        <div class="editor-reply" data-my-pid="${id}"></div>
                        <div class="comment-list"></div>
                    </div>`
            }

            async function postComment(html, pid) {
                let data = window.data
                //  撈出同串留言
                let listOfPid = window.map.commentPid.get(pid)
                //  撈出串主
                let commenterOfPid = pid ? window.map.commentId.get(pid).user.id : undefined
                let author = data.blog.author.id
                let me = data.me.id
                //  是否此串第一篇留言
                let isFirstComment = !listOfPid.length
                //  確認留言者是否文章作者
                let isAuthor = author === me
                //  是否留言回覆
                let isReply = !pid
                //  須被通知的名單
                let listOfNotified = new Set(listOfPid.map(({ user: { id } }) => id))
                //  加入串主
                if(commenterOfPid){
                    listOfNotified.add(commenterOfPid)
                }
                //  移除文章作者
                listOfNotified.delete(author)
                //  移除留言者
                listOfNotified.delete(me)
                //  同串的留言id
                let listOfCommentId = listOfPid.map(({ id }) => id)
                //  文章內所有留言id
                let listOfAllCommentId = [...map.commentId.keys()]

                let payload = {
                    //  用來新創留言
                    user_id: me,
                    html, //留言內容
                    p_id: pid ? pid : null ,
                    commenterOfPid,
                    blog_id: data.blog.id, //文章id
                    //  用來找出作者與留言者本人的被通知人條目
                    // listOfNotified: [...listOfNotified],    //被通知人
                    // listOfCommentId, // 同串的留言id
                    //  用來找出follow的作者關係條目
                    // listOfAllCommentId: isAuthor ? undefined : [...map.commentId.keys()],
                    author: isAuthor ? undefined : author
                }
                return await axios.post(api_comment, payload)
            }

            function init_editor(container_id, handle) {
                //  editor config
                const { createEditor } = window.wangEditor

                //  功能：貼上純文字內容
                const customPaste = function (editor, event) {
                    event.preventDefault()
                    const text = event.clipboardData.getData('text/plain')
                    editor.insertText(text)
                }
                let editorConfig = {
                    MENU_CONF: {},
                    customPaste

                }
                if (handle) {
                    editorConfig = { ...editorConfig, ...handle }
                }
                //  editor config : placeholder
                editorConfig.placeholder = '我有話要說'
                // editor 創建
                const editor = createEditor({
                    config: editorConfig,
                    selector: container_id,
                    mode: 'simple'
                })

                $(container_id).click(handle_click)

                function handle_click() {
                    if (window.data.me.id) {
                        return
                    }
                    if (confirm('請先登入')) {
                        location.href = `/login?from=${location.pathname}`
                    }
                    return
                }

                return editor
            }

            function mapComments(comments) {
                console.log('mapComments')
                window.map = window.map ? window.map : {}
                let commentId = window.map.commentId = new Map()
                let commentPid = window.map.commentPid = new Map()
                function setPid(pid, comment) {
                    let pidList = commentPid.get(pid)
                    if (!pidList) {
                        pidList = []
                    }
                    if (comment) {
                        pidList.push(comment)
                    }
                    commentPid.set(pid, pidList)
                }
                function go(comment) {

                    let { id, p_id: pid, reply } = comment
                    setPid(pid, comment)
                    commentId.set(id, comment)
                    if (reply.length) {
                        reply.forEach(go)
                    } else {
                        setPid(id)
                    }
                }
                if (!comments.length) {
                    setPid(0)
                    return
                }
                comments.forEach(go)
            }
        })
    </script>
</body>

</html>