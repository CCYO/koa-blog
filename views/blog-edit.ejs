<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            padding: 0;
            margin: 0;
        }

        #showBox {
            position: relative;
            z-index: 999;
        }

        #hiddenBox {
            position: absolute;
            z-index: 888;
            height: 100%;
            width: 100%;
            background: rgba(200, 200, 200, 0.5);
        }
    </style>
</head>

<body>
    <% if (blog.title) { %>
    <div id="hiddenBox" style="display: none"></div>
    <% } else { %>
    <div id="hiddenBox"></div>
    <% } %>
    <div id="showBox">
        <input type="text" id="title" value="<%= blog.title %>">
        <button id="sentTitle">
            <% if (blog.title) { %>
            修改標題
            <% } else { %>
            創建BLOG
            <% } %>
        </button>
    </div>
    <div>
        <div id="toolbar-container"></div>
        <div id="editor-container"></div>
    </div>
    <button id="getHTML">GET HTML</button>
    <div id="user" style="display: none">
        <%- JSON.stringify(user) %>
    </div>
    <div id="blog" style="display: none">
        <%- JSON.stringify(blog) %>
        <!--
            [{ hex_md5, url}, ...
        -->
    </div>
    <%- include('wedgets/cdn') %>
    <%- include('wedgets/utils') %>
    <!-- 引入 css -->
    <link href="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/css/style.css" rel="stylesheet">
    <!-- 引入 js -->
    <script src="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/index.min.js"></script>
    <!-- 引入 Spark-MD5 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/spark-md5/3.0.2/spark-md5.min.js"></script>
    <script>
        let user = document.getElementById('user')
        let blog = document.getElementById('blog')
        let hiddenBox = $('#hiddenBox')
        let title = $('#title')
        let sentTile = $('#sentTitle')
        let insertImg
        eval('user = ' + user.innerText)
        eval('blog = ' + blog.innerText)
    </script>
    <script>
        //  btn.click 綁定 handle，創建Blog or 更新Title
        sentTile.addEventListener('click', addBlog_or_updateTitle)

        wangEditor.i18nAddResources('tw', {
            // 标题
            header: {
                title: '標題',
                text: '文字',
            },
            blockQuote: {
                title: '圖標'
            },

            // ... 其他语言词汇，下文说明 ...
        })
        wangEditor.i18nChangeLanguage('tw')

        const { createEditor, createToolbar } = window.wangEditor
        const editorConfig = { MENU_CONF: {} }

        editorConfig.placeholder = '请输入内容'
        editorConfig.onChange = (editor) => {
            // 当编辑器选区、内容变化时，即触发
            console.log('content', editor.children)
            console.log('html', editor.getHtml())
        }
        editorConfig.MENU_CONF['uploadImage'] = {
            // 上传图片的配置

            //  自定義 upload imgage
            async customUpload(img, insertFn) {
                //  生成 img 的 hash(hex格式)
                let { url, hash } = await getImgHash(img)
                //  url無值，代表 blog.imgs 內無此圖
                if (!url) {
                    //  upload img
                    let formdata = new FormData()
                    formdata.append('imgage', img)

                    let {
                        data: {
                            errno, data, msg
                        }
                    } = await axios.post(`/api/editor/img/${hash}/${blog.id}`, formdata)

                    if (!errno) {
                        if (!blog.imgs) blog.imgs = []
                        let { url, alt, href } = init_img(data)
                        blog.imgs.push(data)
                        insertImg = insertFn(url, alt, href)
                    } else {
                        alert(msg)
                    }
                    //  url 有值，代表 blog.imgs 已有此圖
                }else{
                    //  直接插入圖片
                    insertImg = insertFn( url, hash, url)
                }
            },

            // 還要補充上傳失敗的動作
        }

        // 创建编辑器
        const editor = createEditor({
            html: blog.html,
            selector: '#editor-container',
            config: editorConfig,
            mode: 'simple' // 或 'simple' 参考下文
        })
        // 创建工具栏
        const toolbar = createToolbar({
            editor,
            selector: '#toolbar-container',
            mode: 'simple' // 或 'simple' 参考下文
        })

        $('#getHTML').addEventListener('click', (e) => {
            //  獲取 html
            var data_html = editor.getHtml()
            //  獲取 html 內的 image
            let imgs = editor.getElemsByType('image')

            editor.children.forEach(({ children }) => {
                children.forEach(item => {
                    if (item.type === 'image') last_img_list.push(item)
                })
            })
            const go_to_delete = img_list.filter((item) => {
                return !last_img_list.includes(item)
            })
            console.log('@last_img_list => ', last_img_list)
            console.log('@img_ist => ', img_list)
            console.log('@go_to_delete => ', go_to_delete)
            console.log('@data_html => ', data_html)
            console.log('@data_text => ', data_text)


        })



        async function addBlog_or_updateTitle(e) {
            if (!title.value) {
                alert('請填入標題')
                title.value = blog.title
                return
            } else if (title.value === blog.title) {
                return alert('若要更改，請填入新標題')
            }
            let payload = { title: title.value }
            if (blog.id) payload.id = blog.id
            const {
                data: {
                    errno, data, msg
                }
            } = await axios.post('/api/editor/blog', payload)
            if (!errno && !data) {
                blog.title = title.value
                alert('標題修改完成')
            } else if (!errno) {
                console.log('@data => ', data)
                hiddenBox.style.display = 'none'
                blog = data
                //  自動focus到 editor
            } else {
                alert(`標題修改失敗 => ${msg}`)
            }
            return
        }

        async function getImgHash(img) {
            //  計算出 img 的 md5Hash(hex格式)
            let md5hash = await getMD5Hash(img)
            let res = { hash: md5hash }
            //  若blog.imgs有檔案
            if (blog && blog.imgs) {
                //  利用 md5Hash 比對 blog 內是否已有該 img
                let exist = blog.imgs.some((img) => {
                    let { hash } = img
                    //  同hash，代表同img
                    if (md5hash === hash) {
                        //  返回 blog.imgs 內相同的img資料
                        res = img
                        return true
                    }
                })
                //  blog.imgs 內沒有該img，返回計算出的 md5hash
                console.log('@res => ', res)
            }
            return res
        }

        //  返回 file 的 FileReader.result
        function getMD5Hash(file) {
            return new Promise((resolve, reject) => {
                let fr = new FileReader()
                fr.addEventListener('load', (evt) => {
                    if (fr.readyState === FileReader.DONE) {
                        let hash = SparkMD5.ArrayBuffer.hash(fr.result)
                        console.log('計算出的hash => ', hash)
                        resolve(hash)
                    }
                })
                fr.addEventListener('error', (error) => {
                    console.log('fr load 發生錯誤 => ', error)
                    reject(error)
                })
                fr.readAsArrayBuffer(file)
            })
        }

        //  格式化要傳入 insertFn 的 imgData
        function init_img({ url, hash }) {
            return {
                url, hash, href: url, alt: hash
            }
        }
    </script>
</body>

</html>