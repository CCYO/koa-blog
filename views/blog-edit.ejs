<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            padding: 0;
            margin: 0;
        }

        #showBox {
            position: relative;
            z-index: 999;
        }

        #hiddenBox {
            position: absolute;
            z-index: 888;
            height: 100%;
            width: 100%;
            background: rgba(200, 200, 200, 0.5);
        }
    </style>
</head>

<body>
    <% if (blog.title) { %>
    <div id="hiddenBox" style="display: none"></div>
    <% } else { %>
    <div id="hiddenBox"></div>
    <% } %>
    <div id="showBox">
        <input type="text" id="title" value="<%= blog.title %>">
        <button id="sentTitle">
            <% if (blog.title) { %>
            修改標題
            <% } else { %>
            創建BLOG
            <% } %>
        </button>
    </div>
    <div>
        <div id="toolbar-container"></div>
        <div id="editor-container"></div>
    </div>
    
        <input type="checkbox" name="" id="show" <%= blog.show ? "checked" : '' %> >發佈文章 
    
    
    <button id="save">存檔</button>

    <!-- AXIOS -->
    <%- include('wedgets/cdn') %>
    <%- include('wedgets/utils') %>
    <!-- 引入 css -->
    <link href="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/css/style.css" rel="stylesheet">
    <!-- 引入 js -->
    <script src="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/index.min.js"></script>
    <!-- 引入 Spark-MD5 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/spark-md5/3.0.2/spark-md5.min.js"></script>
    <script>
        let user = <%- JSON.stringify(user) %>
        let blog = <%- JSON.stringify(blog) %>
        let hiddenBox = $('#hiddenBox')
        let title = $('#title')
        let sentTitle = $('#sentTitle')
        let is_show = $('#show')

        if(blog.title) sentTitle.setAttribute('disabled', true)
    </script>
    <script>
        //  editor 的 繁中設定
        wangEditor.i18nAddResources('tw', {
            // 标题
            header: {
                title: '標題',
                text: '文字',
            },
            blockQuote: {
                title: '圖標'
            },

            // ... 其他语言词汇，下文说明 ...
        })
        wangEditor.i18nChangeLanguage('tw')

        //  editor config
        const { createEditor, createToolbar } = window.wangEditor
        const editorConfig = { MENU_CONF: {} }

        //  editor config : placeholder
        editorConfig.placeholder = '请输入内容'

        //  editor config : image upload
        editorConfig.MENU_CONF['uploadImage'] = {
            // 上传图片的配置

            //  自定義 upload imgage
            customUpload,
            
            //  (待補)自定義 upload imgage 失敗
        }

        // editor 創建
        const editor = createEditor({
            //  插入後端取得的 html
            html: blog.html || '',
            selector: '#editor-container',
            config: editorConfig,
            mode: 'simple'
        })
        
        // editor 工具欄創建
        const toolbar = createToolbar({
            editor,
            selector: '#toolbar-container',
            mode: 'simple'
        })

        //  btn#sentTitle.click 綁定 handle，創建Blog or 更新Title
        sentTitle.addEventListener('click', addBlog_or_updateTitle)

        //  inp#title.input 綁定 handle，若有標題才准點擊 btn#sentTitle
        title.addEventListener('input', UI_check_new_title)

        //  inpt#title.blur 綁定 handle，若title無值卻離開，則恢復原值
        title.addEventListener('blur', UI_recover_title)

        //  btn#save 綁定 click handle : 存檔
        $('#save').addEventListener('click', save)

        function UI_check_new_title(e){
            if(!blog.title) return 
            if(blog.title && title.value && title.value !== blog.title){
                return sentTitle.hasAttribute('disabled') && sentTitle.removeAttribute('disabled')
            //  title 不變
            }else{
                return !sentTitle.hasAttribute('disabled') && sentTitle.setAttribute('disabled', true)
            }
        }

        function UI_recover_title(e){
            if(blog.title && !title.value){
                title.value = blog.title
            }
        }

        //  創建 Blog || 修改 title
        async function addBlog_or_updateTitle(e) {
            //  若 title 為空
            if (!title.value) {
                alert('請填入標題')
                //  恢復為原標題
                return title.value = blog.title
            
            //  若 title 不變
            } else if (title.value === blog.title) {
                return alert('若要更改，請填入新標題')
            }
            let payload = { title: title.value }
            if (blog.id) payload.id = blog.id
            const {
                data: {
                    errno, data, msg
                }
            } = await axios.post('/api/editor/blog', payload)

            //  title修改成功
            if (!errno && !data) {
                blog.title = title.value
                sentTitle.setAttribute('disabled', true)
                editor.focus(true)
                alert('標題修改完成')
            //  blog創建成功
            } else if (!errno) {
                alert('BLOG存檔成功')
                location.href = `/blog/edit/${data.id}`
            // 失敗
            } else {
                alert(`標題修改失敗 => ${msg}`)
            }
            return
        }

        async function customUpload(img, insertFn) {
            //  生成 img 的 hash(hex格式)
            let { url, hash } = await getImgHash(img)
            //  url無值，代表 blog.imgs 內無此圖
            if (!url) {
                //  upload img
                let formdata = new FormData()
                formdata.append('imgage', img)

                let {
                    data: {
                        errno, data, msg
                    }
                } = await axios.post(`/api/editor/img/${hash}/${blog.id}`, formdata)

                if (!errno) {
                    if (!blog.imgs) blog.imgs = []
                    blog.imgs.push(data)
                    insertFn(data.url)
                } else {
                    alert(msg)
                }
                //  url 有值，代表 blog.imgs 已有此圖
            } else {
                //  直接插入圖片
                insertFn(url)
            }
        }

        async function getImgHash(img) {
            //  計算出 img 的 md5Hash(hex格式)
            let md5hash = await getMD5Hash(img)
            let res = { hash: md5hash }
            //  若blog.imgs有檔案
            if (blog && blog.imgs) {
                //  利用 md5Hash 比對 blog 內是否已有該 img
                let exist = blog.imgs.some((img) => {
                    let { hash } = img
                    //  同hash，代表同img
                    if (md5hash === hash) {
                        //  返回 blog.imgs 內相同的img資料
                        res = img
                        return true
                    }
                })
                //  blog.imgs 內沒有該img，返回計算出的 md5hash
                console.log('@res => ', res)
            }
            return res
        }

        //  返回 file 的 FileReader.result
        function getMD5Hash(file) {
            return new Promise((resolve, reject) => {
                let fr = new FileReader()
                fr.addEventListener('load', (evt) => {
                    if (fr.readyState === FileReader.DONE) {
                        let hash = SparkMD5.ArrayBuffer.hash(fr.result)
                        console.log('計算出的hash => ', hash)
                        resolve(hash)
                    }
                })
                fr.addEventListener('error', (error) => {
                    console.log('fr load 發生錯誤 => ', error)
                    reject(error)
                })
                fr.readAsArrayBuffer(file)
            })
        }

        async function save(e) {
            //  獲取 html
            var html = editor.getHtml()
            //  獲取 editor 內 img.src(重複的話，只取一個)
            let editor_imgs = [...new Set(editor.getElemsByType('image'))].map(({src}) => src)
            //  獲取 blog 內 image 的 url 與 blogImg_id
            let blog_imgs = [...new Set(blog.imgs)].map(({blogImg_id, url}) => ({blogImg_id, url}))

            let remove_imgs = blog_imgs.filter( img => !editor_imgs.includes(img.url) )
            remove_imgs = remove_imgs.map( ({blogImg}) => blogImg )

            let show = is_show.checked

            const {
                data: {
                    errno, data, msg
                }
            } = await axios.patch(`/api/editor/blog`, { id: blog.id, remove_imgs, html, show})

            if (!errno) {
                alert('blog save success!')
            } else {
                alert('blog save error!')
            }
        }
    </script>
</body>

</html>