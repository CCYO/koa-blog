<!-- favicon + MY_CSS + BS5_CSS -->
<%- include('wedgets/common/header') %>

<body>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@300&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://www.wangeditor.com/demo/css/view.css">
    <style>
        #showBox {
            position: relative;
            z-index: 1010;
        }

        #backdrop {
            position: fixed;
            z-index: 1000;
            /* height: 100%;
            width: 100%; */
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background: rgba(200, 200, 200, 0.5);
        }

        #editor-container {
            border: 1px solid rgba(200, 200, 200, .8);
            height: 400px;
            min-height: 300px;
        }
    </style>
    <!-- 主導覽： NAV_CSS + NAV第一層template -->
    <%- include('wedgets/navbar/index') %>

    <div class="container">
        <div id='backdrop' class="<%= blog.id ? 'my-noshow' : 'my-show' %>"></div>
        <div id="showBox">
            <input type="text" id="title" name="title" value="<%= blog.id ? blog.title : '' %>">
            <button id="updateTitle">修改標題</button>
        </div>
        <div id="editor-wrapper">
            <div id="toolbar-container"></div>
            <div id="editor-container"></div>

            <label> <input type="checkbox" id="show" name='show' <%= blog.show ? 'checked' : '' %> />公開文章</label>
            <% if (blog.show) { %>
            <p>已於 <%= blog.showAt %> 發佈</p>
            <% } %>

            <button id="save">存檔</button>
            <button id="remove">刪除此篇文章</button>
        </div>

        <!-- 當前使用者頁面的使用者資料 -->
        <div data-my-data="blog" style="display: none">
            <%- JSON.stringify(blog) %>
        </div>

        <!-- 引入 Spark-MD5 -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/spark-md5/3.0.2/spark-md5.min.js"></script>
        <!-- 引入 xss -->
        <script src="https://rawgit.com/leizongmin/js-xss/master/dist/xss.js"></script>
        <!-- 引入 Ajv -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/ajv/8.11.0/ajv7.min.js"
            integrity="sha512-NGcX0dMSiOACZ7t7BKTSSoL2vnVKAp5mG+M8gK1vZQGwJtzbLQba1eniSXdez+WfDtcrxBUEo143DV297oAnbw=="
            crossorigin="anonymous" referrerpolicy="no-referrer">
            </script>

        <!-- JQ AXIOS BS5 -->
        <%- include('wedgets/cdn') %>
        <!-- 引入 editor css -->
        <link href="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/css/style.css" rel="stylesheet">
        <!-- 引入 editor js -->
        <script src="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/index.min.js"></script>
        <!-- 初始化來自ejs傳入當前頁面所需的數據 -->
        <script defer src="/js/initData.js"></script>

        <!--
            logout功能 +
            完整渲染 NAV +
            取得news +
            完整渲染 通知下拉選單
        -->
        <script defer src="/js/navbar.js"></script>

        <script>
            $(async function () {
                await init().catch(e => console.log(`blog-editor.ejs 初始化時發生錯誤 => ${e}`))

                async function init() {
                    //  初始化 ejs 附加、用於此頁面的數據
                    await window._my.initData()
                    console.log('@ 已確認頁面所需數據皆已初始化完成')

                    let Ajv = window.ajv7
                    let ajv = new Ajv({ allErrors: true })

                    let api_blog = '/api/blog/'


                    //  input#title 綁定 input + blur handle => 驗證新標題
                    let $title = $('#title')
                    if (!window.data.blog.html) {
                        input[name = show].prop('disabled', true)
                    }
                    
                    $title.on('input', handle_title)

                    // $title
                    //     .on('blur', handle_valicateTitle)
                    //     .on('input', handle_valicateTitle)

                    // //  綁定 title 更新更能
                    // let $btn_updateTitle = $('#updateTitle')
                    // $btn_updateTitle
                    //     .prop('disabled', true)
                    //     .click(handle_updateTitle)


                    // //  初始化 編輯文章功能
                    // init_editorBlog()

                    // 初始化 編輯文章頁 的功能
                    function init_editorBlog() {
                        let $checkbox_show = $('#show')
                        let api_uploadImg = '/api/blog/img'
                        //  初始化editor
                        init_editor()
                        //  btn#save 綁定 click handle => 存檔 blog
                        $('#save').on('click', handle_saveBlog)
                        //  btn#remove 綁定 click handle => 刪除 blog
                        $('#remove').on('click', handle_removeBlog)

                        //  handle => 刪除 blog
                        async function handle_removeBlog(e) {
                            if (!confirm('真的要刪掉?')) {
                                return
                            }

                            const {
                                data: {
                                    errno, data, msg
                                }
                            } = await axios.delete(api_blog, { data: { id: window.data.blog.id } })

                            if (!errno) {
                                alert('已成功刪除此篇文章')
                                location.href = '/self'
                            } else {
                                alert(msg)
                            }
                        }

                        //  蒐集 input 表格數據
                        function getInputValue() {
                            let payload = {
                                title: my_xss($('[name=title]').val().trim()),
                                html: htmlNotIncludeEmpty(),
                                show: $('[name=show]').is(':checked')
                            }
                            return payload

                            /* 取出當前*/
                            function htmlNotIncludeEmpty() {
                                //  取出當前html
                                let curHtml = my_xss(window.editor.getHtml().trim())
                                //  匹配開頭、結尾的空格與空行
                                var reg_start = /^((<p><br><\/p>)|(<p>(\s|&nbsp;)*<\/p>))*/g
                                var reg_end = /((<p><br><\/p>)|(<p>(\s|&nbsp;)*<\/p>))*$/g
                                //  移除開頭、結尾的空格與空行
                                curHtml = curHtml.replace(reg_start, '')
                                curHtml = curHtml.replace(reg_end, '')
                                return curHtml
                            }
                        }

                        window.aa = handle_saveBlog
                        //  handle => 儲存 blog
                        async function handle_saveBlog(e, payload) {
                            // let payload = getInputValue()

                            if (payload.show && !payload.html) {
                                alert('沒內容公開幹嘛啦')
                                return
                            }

                            for (prop in payload) {
                                let val = payload[prop]
                                if (val == undefined && val === blog[prop]) {
                                    delete payload[prop]
                                }
                            }

                            if (!Object.getOwnPropertyNames(payload).length) {
                                alert('沒有要更新的就別亂')
                                return
                            }


                            if (!valicate(payload)) {
                                let model = {
                                    '/html': {
                                        minLength: '文章內容不能為空',
                                        maxLength: '文章內容太多了'
                                    },
                                    '/show': {
                                        type: '公開與否的數據格式不正確'
                                    }
                                }
                                let errors = valicate.errors
                                for (error of errors) {
                                    let { instancePath, keyword, message } = error
                                    console.log('@ error => ', error)
                                    console.log('@ instancePath => ', instancePath)
                                    if (!error.hasOwnProperty(instancePath)) {
                                        alert(message)
                                    } else {
                                        alert(model[instancePath][keyword])
                                    }
                                }
                                return
                            }
                            return
                            //  取出 要刪除關聯的圖片
                            let cancelImgs = removeAssociateImgs()
                            if (cancelImgs.length) {    //  若cancel有值
                                payload.cancelImgs = cancelImgs //  放入payload
                            }

                            //  payload放入blog_id
                            payload.id = window.data.blog.id

                            const {
                                data: {
                                    errno, data, msg
                                }
                            } = await axios.patch(api_blog, payload)

                            if (errno) {
                                alert('blog save error!')
                                return
                            }
                            //  若此次有更新title
                            if (payload.title) {
                                //  同步 window.blog.title
                                $title.val(payload.title)
                                //  關閉title更新鈕
                                $btn_updateTitle.prop('disabled', true)
                            }

                            //  同步 window.blog
                            window.data.blog = { ...window.data.blog, ...data }

                            alert('blog save success!')

                            /* 取出當前*/
                            function htmlNotIncludeEmpty() {
                                //  取出當前html
                                let curHtml = my_xss(window.editor.getHtml().trim())
                                //  匹配開頭、結尾的空格與空行
                                var reg_start = /^((<p><br><\/p>)|(<p>(\s|&nbsp;)*<\/p>))*/g
                                var reg_end = /((<p><br><\/p>)|(<p>(\s|&nbsp;)*<\/p>))*$/g
                                //  移除開頭、結尾的空格與空行
                                curHtml = curHtml.replace(reg_start, '')
                                curHtml = curHtml.replace(reg_end, '')
                                return curHtml
                            }

                            /*  要移除的 blogImg  */
                            function removeAssociateImgs() {
                                let imgs = window.data.blog.imgs
                                //  取出當前圖片 curImgs: [{alt, src}, ...]
                                let curImgs = window.editor.getElemsByType('image').map(({ alt, src }) => ({ alt, src }))
                                //  當前圖片的 src(不重複)
                                let curImgSrcSet = new Set(curImgs.map(({ src }) => src))
                                //  存放要取消關聯的img
                                let cancelImgs = []

                                if (!curImgSrcSet.size) {   // 當前圖片src為空
                                    //  將既有的img全部放入 cancel
                                    cancelImgs = imgs.map(({ blogImg_id }) => blogImg_id)
                                } else if (imgs.length) {   //  當前圖片src不為空，且也存在既有img
                                    //  既有img不存在，當前img卻存在的圖
                                    imgs.reduce((initVal, img) => {
                                        let { url, blogImg_id } = img
                                        !curImgSrcSet.has(url) && initVal.push(blogImg_id)
                                        return initVal
                                    }, cancelImgs)
                                }
                                return cancelImgs
                            }
                        }
                        //  初始化 editor
                        function init_editor() {
                            //  editor 的 繁中設定
                            wangEditor.i18nAddResources('tw', {
                                // 标题
                                header: {
                                    title: '標題',
                                    text: '文字',
                                },
                                blockQuote: {
                                    title: '圖標'
                                },

                                // ... 其他语言词汇，下文说明 ...
                            })
                            wangEditor.i18nChangeLanguage('tw')

                            //  editor config
                            const { createEditor, createToolbar } = window.wangEditor
                            const editorConfig = { MENU_CONF: {} }

                            //  editor config : placeholder
                            editorConfig.placeholder = '请输入内容'

                            //  editor config : image upload
                            editorConfig.MENU_CONF['uploadImage'] = {
                                // 上传图片的配置

                                //  自定義 upload imgage
                                customUpload,

                                //  (待補)自定義 upload imgage 失敗
                            }

                            // editor 創建
                            const editor = createEditor({
                                //  插入後端取得的 html
                                html: window.data.blog.html || '',
                                selector: '#editor-container',
                                config: editorConfig,
                                mode: 'simple'
                            })

                            // editor 工具欄創建
                            const toolbar = createToolbar({
                                editor,
                                selector: '#toolbar-container',
                                mode: 'simple'
                            })


                            !window.data.blog.id
                                && editor.disable()     //  若是撰寫新文章，必須等標題創建好才能編寫
                                || editor.focus(true)   //  若是撰寫舊新文章，自動聚焦在文章末段

                            window.editor = editor

                            //  editor的 自定義上傳圖片方法
                            async function customUpload(img, insertFn) {
                                let reg_ext = /^(.+)\.(.*)$/

                                //  校驗檔案格式(jpg png)
                                let [_, name, ext] = reg_ext.exec(img.name)
                                console.log(name, ext)
                                ext = ext.toLowerCase().trim()
                                if (ext !== 'jpg' && ext !== 'png') {
                                    alert('只能傳jpg跟png啦!')
                                    return
                                }

                                //  生成 img 的 hash(hex格式)
                                let { url, hash } = await _getImgHash(img)
                                name = encodeURIComponent(name)
                                if (!url) { //url無值，代表 window.blog.imgs 內無此圖
                                    let { id } = window.data.blog
                                    let api = `${api_uploadImg}?hash=${hash}&name=${name}&ext=${ext}&blog_id=${id}`
                                    //  upload img
                                    let formdata = new FormData()
                                    formdata.append('blogImg', img)

                                    //  發送ajax，由後端將圖片上傳給GCS
                                    let {
                                        data: {
                                            errno, data, msg
                                        }
                                    } = await axios.post(api, formdata)

                                    if (errno) {
                                        alert(msg)
                                        return
                                    }
                                    /* 上傳成功 */

                                    //  data { img_id, blogImg_id, name, url, hash }
                                    if (data.name) {
                                        data.name = decodeURIComponent(data.name)
                                    }
                                    window.data.blog.imgs.push(data)
                                    //  將圖片插入 editor
                                    insertFn(data.url, data.name)
                                } else {
                                    /*  url 有值，代表 blog.imgs 已有此圖 */

                                    //  直接插入圖片
                                    insertFn(url,)
                                }
                            }

                            //  取得圖片的 hash
                            async function _getImgHash(img) {

                                //  計算出 img 的 md5Hash(hex格式)
                                let md5hash = await _getMD5Hash(img)
                                let res = { hash: md5hash }

                                let imgs = window.data.blog.imgs
                                if (imgs.length) {  //  若blog.imgs有檔案
                                    //  比對 blog 內是否已有該 img
                                    let exist = imgs.some((img) => {
                                        let { hash } = img
                                        //  同hash，代表同img
                                        if (md5hash === hash) {
                                            //  返回 blog.imgs 內相同的img資料
                                            return res = img
                                        }
                                    })
                                }
                                return res
                            }

                            //  返回 file 的 FileReader.result
                            function _getMD5Hash(file) {
                                return new Promise((resolve, reject) => {
                                    let fr = new FileReader()
                                    fr.addEventListener('load', (evt) => {
                                        if (fr.readyState === FileReader.DONE) {
                                            let hash = SparkMD5.ArrayBuffer.hash(fr.result)
                                            console.log('計算出的hash => ', hash)
                                            resolve(hash)
                                        }
                                    })
                                    fr.addEventListener('error', (error) => {
                                        console.log('fr load 發生錯誤 => ', error)
                                        reject(error)
                                    })
                                    fr.readAsArrayBuffer(file)
                                })
                            }

                        }
                    }

                    //  
                    // let valicate = valicator()
                    //  handle 驗證 title
                    function handle_valicateTitle(e) {
                        //  驗證標題
                        // let title = valicateAndGetTitle(e.target.value)
                        // if (title) {  //  驗證ok
                        //     $btn_updateTitle.prop('disabled', false)    //  可更新
                        // } else {  //  驗證失敗
                        //     e.type === 'input' && $btn_updateTitle.prop('disabled', true)   //不可更新
                        //     e.type === 'blur' && $title.val(window.data.blog.title)   //  恢復原title
                        // }
                        let title = htmlNotIncludeEmpty(e.target.value)
                        console.log('@格式化的title => ', title)
                        let valid = valicate({ title })
                        console.log('@驗證後的結果 => ', valid)
                        if (valid) {
                            $btn_updateTitle.prop('disabled', false)    //  可更新
                            console.log('@ valid ')
                            return
                        }
                        console.log('@ inValid => ', valicate.errors)
                    }

                    let schema = {
                        type: 'object',
                        properties: {
                            title: {
                                type: 'string',
                                diff: 'title',
                                minLength: 1,
                                maxLength: 25

                            },
                            html: {
                                type: 'string',
                                diff: 'html',
                                minLength: 1,
                                maxLength: 65536
                            },
                            show: {
                                type: 'boolean',
                                diff: 'show'
                            }
                        },
                        if: { properties: { show: true } },
                        then: { required: ['html'] }
                    }

                    let payload = new Map()
                    let valicator = init_valicator(schema) 

                    function init_valicator(schema) {
                        //  定義 keyword: diff
                        ajv.addKeyword({
                            keyword: 'diff',
                            type: ['string', 'number', 'boolean'],
                            schemaType: 'string',
                            validate: function _(inputName, newData) {
                                let curData = window.data.blog[inputName]
                                if (newData !== curData) {
                                    return true
                                }
                                if (!_.errors) {
                                    _.errors = []
                                }
                                _.errors.push({ keyword: 'diff' })
                                return false
                            },
                            errors: true
                        })
                        //  定義schema
                        let valicate = ajv.compile(schema)

                        return (newData) => {
                            console.log('@@ => ', newData)
                            if (!valicate(newData)) {
                                console.log(valicate.errors)
                                let kvPairs = valicate.errors.map(inputNameAndMessage)
                                return kvPairs
                            } else {
                                return null
                            }
                        }
                        //  用來生成 { inputName, message } 錯誤提醒的函數
                        function inputNameAndMessage(error) {
                            let { instancePath, keyword, params } = error
                            let inputName = instancePath.slice(1)
                            let value = params ? [...Object.entries(params)][0][1] : undefined
                            let message
                            switch (keyword) {
                                case 'type':
                                    message = `數據格式必須為${value}`
                                    break
                                case 'minLength':
                                    message = `不能少於${value}個字元`
                                    break
                                case 'maxLength':
                                    message = `不能多於${value}個字元`
                                    break
                                case 'if':
                                    message = '請寫內文，不然幹嘛公開文章'
                                    break
                                case 'diff':
                                    message = '與既有值相同，若沒有要更新就別鬧了'
                                    break
                                default:
                                    message = `錯誤訊息的keyword為${keyword} -- 未知的狀況`
                                    break;
                            }
                            return { inputName, message }
                        }

                    }

                    
                    function handle_title(e){
                        let data = { title: my_xss(e.target.value.trim())}
                        let res = valicator(data)
                        if(!res){
                            console.log('ok')
                        }else{
                            console.log(res.inputName, res.msg)
                        }
                        
                    }



                    //  handle => 更新 title
                    async function handle_updateTitle(e) {
                        let title = valicateAndGetTitle($title.val())

                        if (!title) {
                            alert('標題格式有誤')
                        }

                        const {
                            data: {
                                errno, data, msg
                            }
                        } = await axios.patch(api_blog, { title, id: window.data.blog.id })

                        if (!errno) {
                            /* title修改成功 */
                            window.data.blog.title = title
                            //  無法更新
                            $btn_updateTitle.prop('disabled', true)
                            alert('標題修改完成')
                        } else {
                            /* title修改失敗 */
                            alert(`標題修改失敗 => ${msg.message}`)
                        }
                        return
                    }

                    //  utils ------

                    // 用來對表格內容進行xss
                    function my_xss(html) {
                        return filterXSS(html)
                    }

                    // 驗證 標題
                    function valicateAndGetTitle(title) {
                        let newTitle = my_xss($title.val().trim())
                        if (newTitle && newTitle !== window.data.blog.title) {
                            return newTitle
                        } else {
                            return false
                        }
                    }

                    //  去除空格與進行xss
                    function htmlNotIncludeEmpty(data) {
                        //  取出當前html
                        let curHtml = my_xss(data.trim())
                        //  匹配開頭、結尾的空格與空行
                        var reg_start = /^((<p><br><\/p>)|(<p>(\s|&nbsp;)*<\/p>))*/g
                        var reg_end = /((<p><br><\/p>)|(<p>(\s|&nbsp;)*<\/p>))*$/g
                        //  移除開頭、結尾的空格與空行
                        curHtml = curHtml.replace(reg_start, '')
                        curHtml = curHtml.replace(reg_end, '')
                        return curHtml
                    }

                    //  valicate errno
                    let errnoTag = {
                        title: {
                            1: ''
                        }
                    }
                }
            })

        </script>
</body>

</html>