<!-- favicon + MY_CSS + BS5_CSS -->
<%- include('wedgets/common/header') %>

<body>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@300&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://www.wangeditor.com/demo/css/view.css">
    <style>
        #showBox {
            position: relative;
            z-index: 1010;
        }

        #backdrop {
            position: fixed;
            z-index: 1000;
            /* height: 100%;
            width: 100%; */
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background: rgba(200, 200, 200, 0.5);
        }

        #editor-container {
            border: 1px solid rgba(200, 200, 200, .8);
            height: 400px;
            min-height: 300px;
        }
    </style>
    <!-- 主導覽： NAV_CSS + NAV第一層template -->
    <%- include('wedgets/navbar/index') %>
    <div class="container">
        <div id='backdrop' class="<%= blog.id ? 'my-noshow' : 'my-show' %>"></div>
        <div id="showBox">
            <input type="text" id="title" value="<%= blog.id ? blog.title : '' %>">
            <button id="updateTitle" class="<%= blog.id ? 'my-show' : 'my-noshow' %>">修改標題</button>
            <button id="createBlog" class="<%= blog.id ? 'my-noshow' : 'my-show' %>">創建BLOG</button>
        </div>
        <div id="editor-wrapper">
            <div id="toolbar-container"></div>
            <div id="editor-container"></div>
        </div>
        <input type="checkbox" name="" id="show" <%= blog.show ? 'checked' : '' %> />公開文章
        <% if (blog.show) { %>
        <p>已於 <%= blog.showAt %> 發佈</p>
        <% } %>

        <button id="save">存檔</button>
        <button id="remove">刪除此篇文章</button>
    </div>

    <!-- 當前使用者頁面的使用者資料 -->
    <div data-my-data="blog">
        <%- JSON.stringify(blog) %>
    </div>

    <!-- 引入 Spark-MD5 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/spark-md5/3.0.2/spark-md5.min.js"></script>
    <!-- 引入 xss -->
    <script src="https://rawgit.com/leizongmin/js-xss/master/dist/xss.js"></script>
    
    <!-- JQ AXIOS BS5 -->
    <%- include('wedgets/cdn') %>
    <!-- 引入 editor css -->
    <link href="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/css/style.css" rel="stylesheet">
    <!-- 引入 editor js -->
    <script src="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/index.min.js"></script>
    <!-- 初始化來自ejs傳入當前頁面所需的數據 -->
    <script defer src="/js/initData.js"></script>
    
    <!-- 取得登入資料 -->
    <script defer src="/js/getMe.js"></script>
    <!--
        logout功能 +
        完整渲染 NAV +
        取得news +
        完整渲染 通知下拉選單
    -->
    <script defer src="/js/navbar.js"></script>
    
    <script>
        $(function () {

            let api_uploadImg = '/api/blog/img'
            let api_blog = '/api/blog/'
            //  提供給後端更改前，用來驗證的資料
            let patchData = window.patchData = {}

            //  定義 JQobj
            let $btn_updateTitle = $('#updateTitle')
            let $btn_createBlog = $('#createBlog')
            let $backdrop = $('#backdrop')
            let $title = $('#title')
            let $checkbox_show = $('#show')
            let $save = $('#save')
            let $remove = $('#remove')

            //  初始化editor
            let editor = init_editor()


            $title.on('focus', () => console.log('okok'))

            //  input#title 綁定 blur handle => 驗證新標題
            $title.on('blur', handle_valicate_title)

            //  btn#createBlog 綁定 click handle => 創建 blog
            $btn_createBlog.click(handle_createBlog)

            //  btn#updateTitle 綁定 click handle => 修改 blog title
            $btn_updateTitle.click(handle_updateTitle)

            //  input#show 綁定 change handle => 修改 blog show 狀態
            $checkbox_show.on('change', handle_isShowBlog)

            //  btn#save 綁定 click handle => 存檔 blog
            $save.on('click', handle_saveBlog)

            //  btn#remove 綁定 click handle => 刪除 blog
            $remove.on('click', handle_removeBlog)

            //  handle => 刪除 blog
            async function handle_removeBlog(e) {
                if (!confirm('真的要刪掉?')) {
                    return
                }

                let { id } = window.data.blog

                const {
                    data: {
                        errno, data, msg
                    }
                } = await axios.delete(api_blog, { data: { id } })

                if (!errno) {
                    alert('已成功刪除此篇文章')
                    location.href = '/self'
                } else {
                    alert(msg)
                }
            }

            //  handle => 儲存 blog
            async function handle_saveBlog(e) {
                //  本地資料
                let { id, title, imgs, show, showAt, html } = window.data.blog
                //  要傳給後端更新的資料
                let payload = {}

                //  若title有新值
                let curTitle = my_xss($title.val().trim())
                if (title !== curTitle) {
                    payload.title = curTitle    //  放入payload
                }

                //  若html有新值
                let curHtml = my_xss(window.editor.getHtml().trim())

                if (html !== curHtml) {
                    payload.html = curHtml  //  放入payload
                }

                //  撈出 editor 內的圖片url
                let curImgs = window.editor.getElemsByType('image').map(({ alt, src }) => ({ alt, src }))

                /*  要移除的 blogImg  */
                let cancel = []
                let curImgSrcSet = new Set(curImgs.map(({ src }) => src))

                if(!curImgSrcSet.size){
                    cancel = imgs.map(({blogImg_id}) => blogImg_id)
                }else if (imgs.length) {
                    imgs.reduce((initVal, img) => {
                        let { url, blogImg_id } = img
                        //  篩出要取消關聯的blogImg
                        !curImgSrcSet.has(url) && initVal.push(blogImg_id)
                        return initVal
                    }, cancel)
                }
                
                if(cancel.length){
                    payload.cancel = cancel
                }

                //  若show有變動
                if (patchData.show != undefined && show !== patchData.show) {
                    if (!showAt && patchData.show) {
                        //  初次發佈
                        payload.show = 1
                    } else if (showAt && !patchData.show) {
                        //  發後隱藏
                        payload.show = 2
                    } else if (showAt && patchData.show) {
                        //  發後隱藏，隱後再發
                        payload.show = 3
                    }
                }

                if (!Object.getOwnPropertyNames(payload).length) {
                    alert('沒變動，別亂好嗎?')
                    return
                } else {
                    payload.id = id
                }

                const {
                    data: {
                        errno, data, msg
                    }
                } = await axios.patch(api_blog, payload)

                if (errno) {
                    alert('blog save error!')
                    return
                }
                if (payload.title) {
                    //  同步 window.blog.title 與 資料庫title
                    $title.val(payload.title)
                    $btn_updateTitle.prop('disabled', true)
                }

                //  同步 window.blog 與 資料庫
                window.data.blog = { ...window.data.blog, ...data.blog }

                alert('blog save success!')
            }

            //  handle => 修改 blog show 狀態
            function handle_isShowBlog(e) {
                patchData.show = e.target.checked
            }

            //  handle => 修改 title
            async function handle_updateTitle(e) {
                let newTitle = $title.val().trim()
                let { title: oldTitle, id } = window.data.blog

                let payload = { title: newTitle, id }

                const {
                    data: {
                        errno, data, msg
                    }
                } = await axios.patch(api_blog, payload)

                if (!errno) {
                    /* title修改成功 */
                    window.data.blog.title = newTitle

                    $btn_updateTitle.prop('disabled', true)
                    window.editor.focus(true)

                    alert('標題修改完成')
                } else {
                    /* title修改失敗 */
                    alert(`標題修改失敗 => ${msg.message}`)
                }
                return
            }

            //  handle => 創建 blog，成功後，為 input#title 綁定 input handle => 驗證新標題
            async function handle_createBlog(e) {
                let title = $title.val().trim()
                if (!title) {
                    alert('標題不能為空')
                    return
                }

                const {
                    data: {
                        errno, data, msg
                    }
                } = await axios.post(api_blog, { title })

                if (!errno) {
                    alert('BLOG創立完成')
                    // document.title = '撰寫文章'

                    // let { user_id, createdAt, updatedAt, ..._data} = data
                    // window.data.blog = {
                    //     ...window.data.blog,
                    //     ..._data,    //  { id, title, html, show, showAt, createdAt, updatedAt }
                    //     showAt: null,
                    //     html: null
                    // }

                    // $title.on('input', handle_valicate_title)

                    // $btn_createBlog.toggleClass(['my-show', 'my-noshow'])
                    // $btn_updateTitle.toggleClass(['my-show', 'my-noshow']).prop('disabled', true)
                    // $backdrop.toggle(false)

                    // window.editor.enable()
                    // window.editor.focus(true)

                    location.href = `/blog/edit/${data.id}`
                } else {
                    alert(`BLOG創立失敗 => ${msg.message}`)
                    console.log(msg.stack)
                }
            }

            // handle => 驗證新標題
            function handle_valicate_title(e) {
                let newTitle = $title.val().trim()
                let { id, title: oldTitle } = window.data.blog

                if (e.type === 'blur') {
                    /* blur 時的標題驗證 */
                    if (!id && !newTitle) {
                        //  未建立blog 且 標題又為空
                        alert('請先寫入標題')
                        setTimeout(() => $title.focus(), 0)
                    } else if (id && !newTitle) {
                        //  已建立blog 且 標題為空
                        $title.val(oldTitle)
                    }
                } else if (e.type === 'input') {
                    /* input 時的標題驗證，且 input handle 是在 oldTitle 有值後才綁定的*/
                    if (!!newTitle && oldTitle !== newTitle) {
                        //  標題有值 且 新舊標題不相同
                        $btn_updateTitle.prop('disabled', false)
                    } else {
                        $btn_updateTitle.prop('disabled', true)
                    }
                }
                return
            }

            //  初始化 editor
            function init_editor() {
                //  editor 的 繁中設定
                wangEditor.i18nAddResources('tw', {
                    // 标题
                    header: {
                        title: '標題',
                        text: '文字',
                    },
                    blockQuote: {
                        title: '圖標'
                    },

                    // ... 其他语言词汇，下文说明 ...
                })
                wangEditor.i18nChangeLanguage('tw')

                //  editor config
                const { createEditor, createToolbar } = window.wangEditor
                const editorConfig = { MENU_CONF: {} }

                //  editor config : placeholder
                editorConfig.placeholder = '请输入内容'

                //  editor config : image upload
                editorConfig.MENU_CONF['uploadImage'] = {
                    // 上传图片的配置

                    //  自定義 upload imgage
                    customUpload,

                    //  (待補)自定義 upload imgage 失敗
                }

                // editor 創建
                const editor = createEditor({
                    //  插入後端取得的 html
                    html: window.data.blog.html || '',
                    selector: '#editor-container',
                    config: editorConfig,
                    mode: 'simple'
                })

                // editor 工具欄創建
                const toolbar = createToolbar({
                    editor,
                    selector: '#toolbar-container',
                    mode: 'simple'
                })


                !window.data.blog.id
                    && editor.disable()     //  若是撰寫新文章，必須等標題創建好才能編寫
                    || editor.focus(true)   //  若是撰寫舊新文章，自動聚焦在文章末段

                window.editor = editor
            }

            //  editor的 自定義上傳圖片方法
            async function customUpload(img, insertFn) {
                let reg_ext = /^(.+)\.(.*)$/

                //  校驗檔案格式(jpg png)
                let [_, name, ext] = reg_ext.exec(img.name)
                console.log(name, ext)
                ext = ext.toLowerCase().trim()
                if (ext !== 'jpg' && ext !== 'png') {
                    alert('只能傳jpg跟png啦!')
                    return
                }

                //  生成 img 的 hash(hex格式)
                let { url, hash } = await _getImgHash(img)
                name = encodeURIComponent(name)
                if (!url) { //url無值，代表 window.blog.imgs 內無此圖
                    let { id } = window.data.blog
                    let api = `${api_uploadImg}?hash=${hash}&name=${name}&ext=${ext}&blog_id=${id}`
                    //  upload img
                    let formdata = new FormData()
                    formdata.append('blogImg', img)

                    //  發送ajax，由後端將圖片上傳給GCS
                    let {
                        data: {
                            errno, data, msg
                        }
                    } = await axios.post(api, formdata)

                    if (errno) {
                        alert(msg)
                        return
                    }
                    /* 上傳成功 */

                    //  data { img_id, blogImg_id, name, url, hash }
                    if (data.name) {
                        data.name = decodeURIComponent(data.name)
                    }
                    window.data.blog.imgs.push(data)
                    //  將圖片插入 editor
                    insertFn(data.url, data.name)
                } else {
                    /*  url 有值，代表 blog.imgs 已有此圖 */

                    //  直接插入圖片
                    insertFn(url, )
                }
            }

            //  取得圖片的 hash
            async function _getImgHash(img) {

                //  計算出 img 的 md5Hash(hex格式)
                let md5hash = await _getMD5Hash(img)
                let res = { hash: md5hash }

                let imgs = window.data.blog.imgs
                if (imgs.length) {  //  若blog.imgs有檔案
                    //  比對 blog 內是否已有該 img
                    let exist = imgs.some((img) => {
                        let { hash } = img
                        //  同hash，代表同img
                        if (md5hash === hash) {
                            //  返回 blog.imgs 內相同的img資料
                            return res = img
                        }
                    })
                }
                return res
            }

            //  返回 file 的 FileReader.result
            function _getMD5Hash(file) {
                return new Promise((resolve, reject) => {
                    let fr = new FileReader()
                    fr.addEventListener('load', (evt) => {
                        if (fr.readyState === FileReader.DONE) {
                            let hash = SparkMD5.ArrayBuffer.hash(fr.result)
                            console.log('計算出的hash => ', hash)
                            resolve(hash)
                        }
                    })
                    fr.addEventListener('error', (error) => {
                        console.log('fr load 發生錯誤 => ', error)
                        reject(error)
                    })
                    fr.readAsArrayBuffer(file)
                })
            }

            function my_xss(html) {
                return filterXSS(html, {
                    onIgnoreTagAttr: function (tag, name, value, isWhiteAttr) {
                        let attr = name.substr(0, 5)
                        if (attr === "data-" || attr === 'style') {
                            // 通过内置的escapeAttrValue函数来对属性值进行转义
                            return `${name}="${filterXSS.escapeAttrValue(value)}"`;
                        }
                    }
                })
            }
        })    
    </script>
</body>

</html>