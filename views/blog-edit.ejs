<!-- favicon + MY_CSS + BS5_CSS -->
<%- include('wedgets/common/header') %>

<body>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@300&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://www.wangeditor.com/demo/css/view.css">
    <style>
        #showBox {
            position: relative;
            z-index: 1010;
        }

        #backdrop {
            position: fixed;
            z-index: 1000;
            /* height: 100%;
            width: 100%; */
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background: rgba(200, 200, 200, 0.5);
        }

        #editor-container {
            border: 1px solid rgba(200, 200, 200, .8);
            height: 400px;
            min-height: 300px;
        }
    </style>
    <!-- 主導覽： NAV_CSS + NAV第一層template -->
    <%- include('wedgets/navbar/index') %>

    <div class="container">
        <div id='backdrop' class="<%= blog.id ? 'my-noshow' : 'my-show' %>"></div>
        <div id="showBox">
            <input type="text" id="title" name="title" class="form-control" value="<%= blog.id ? blog.title : '' %>">
            <div class="valid-feedback">
                Looks good!
            </div>
            <button id="updateTitle">修改標題</button>
        </div>
        <div id="editor-wrapper">
            <div id="toolbar-container"></div>
            <div id="editor-container"></div>

            <label> <input type="checkbox" id="show" name='show' <%=blog.show ? 'checked' : '' %> />公開文章</label>
            <% if (blog.show) { %>
            <p>已於 <%= blog.showAt %> 發佈</p>
            <% } %>

            <button id="save">存檔</button>
            <button id="remove">刪除此篇文章</button>
        </div>


        <!-- 當前使用者頁面的使用者資料 -->
        <div data-my-data="blog">
            <%- JSON.stringify(blog) %>
        </div>

        <!-- 引入 Spark-MD5 -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/spark-md5/3.0.2/spark-md5.min.js"></script>
        <!-- 引入 xss -->
        <script src="https://rawgit.com/leizongmin/js-xss/master/dist/xss.js"></script>
        <!-- 引入 Ajv -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/ajv/8.11.0/ajv7.min.js"
            integrity="sha512-NGcX0dMSiOACZ7t7BKTSSoL2vnVKAp5mG+M8gK1vZQGwJtzbLQba1eniSXdez+WfDtcrxBUEo143DV297oAnbw=="
            crossorigin="anonymous" referrerpolicy="no-referrer">
            </script>

        <!-- JQ AXIOS BS5 -->
        <%- include('wedgets/cdn') %>
        <!-- 引入 editor css -->
        <link href="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/css/style.css" rel="stylesheet">
        <!-- 引入 editor js -->
        <script src="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/index.min.js"></script>
        <!-- 初始化來自ejs傳入當前頁面所需的數據 -->
        <script defer src="/js/initData.js"></script>

        <!--
            logout功能 +
            完整渲染 NAV +
            取得news +
            完整渲染 通知下拉選單
        -->
        <script defer src="/js/navbar.js"></script>

        <script>
            $(async function () {
                await init().catch(e => console.log(`blog-editor.ejs 初始化時發生錯誤 =>`, e))

                async function init() {
                    //  初始化 ejs 附加、用於此頁面的數據
                    await window._my.initData()
                    console.log('@ 已確認頁面所需數據皆已初始化完成')

                    //  定義公用的變量
                    //  API
                    let api_blog = '/api/blog/'
                    //  JQ Ele
                    let $title = $('#title')
                    let $btn_updateTitle = $('#updateTitle')

                    $btn_updateTitle.prop('disabled', true)

                    //  初始化 頁面各功能
                    //  存放酬載
                    window.payload = init_Payload()
                    //  初始化 編輯文章功能
                    init_editorBlog()
                    //  生成 valicator
                    let valicator = init_valicator()

                    //  input#title 綁定 input + blur handle => 驗證新標題
                    $title.on('input', handle_input)
                    $title.on('blur', handle_blur)
                    //  btn updateTitle
                    $btn_updateTitle.on('click', handle_updateTitle)
                    //  文章是否公開的 checkbox handle
                    $('[name=show]').on('change', handle_changeShow)



                    // 初始化 編輯文章頁 的功能
                    function init_editorBlog() {
                        let api_img = '/api/blog/img'
                        let api_createBlogImgAlt = '/api/blog/blogImgAlt'
                        //  初始化editor
                        window.editor = init_editor()

                        //  btn#save 綁定 click handle => 存檔 blog
                        $('#save').on('click', handle_saveBlog)
                        //  btn#remove 綁定 click handle => 刪除 blog
                        $('#remove').on('click', handle_removeBlog)
                        //  handle => 刪除 blog
                        async function handle_removeBlog(e) {
                            if (!confirm('真的要刪掉?')) {
                                return
                            }

                            const {
                                data: {
                                    errno, data, msg
                                }
                            } = await axios.delete(api_blog, { data: { id: window.data.blog.id } })

                            if (!errno) {
                                alert('已成功刪除此篇文章')
                                location.href = '/self'
                            } else {
                                alert(msg)
                            }
                        }
                        //  handle => 儲存 blog
                        async function handle_saveBlog(e) {
                            checkAndGetCurData()
                        }
                        let curHtml = payload.get('curHtml')
                        let curShow = $('#show').is(':checked')

                        if (!curHtml && curShow) {
                            alert('沒有內容是要公開什麼啦')
                            return
                        }
                        //  取出 要刪除關聯的圖片
                        let cancelImgs = removeAssociateImgs()
                        if (cancelImgs.length) {    //  若cancel有值
                            payloadObj.cancelImgs = cancelImgs //  放入payload
                        }
                        console.log('@payloadObj => ', payloadObj)


                        //  將<img>替換為替代符
                        function getImg(html) {
                            // let reg = /<img src=".+?style="(.+?)".+?blogImgAlt=(\w+?)".+?\/>/g
                            let reg = /<img.+?src=".+?blogImgAlt=(?<id>\d+?)"(.+?style="(?<style>.*?)")?(.*?)\/>/g
                            let res
                            let _html = html
                            while (res = reg.exec(html)) {
                                if (res) {
                                    let { id, style } = res.groups
                                    console.log('轉換img時找到的blogImgAlt => ', id)
                                    _html = _html.replace(res[0], `<x-img data-id='${id}' data-style='${style}'/>`)
                                }
                            }
                            return _html
                        }
                        payloadObj.html = getImg(payload.get('html'))


                        //  payload放入blog_id
                        payloadObj.id = window.data.blog.id
                        console.log('@payloadObj ===> ', payloadObj)

                        const {
                            data: {
                                errno, data, msg
                            }
                        } = await axios.patch(api_blog, payloadObj)

                        if (errno) {
                            alert('blog save error!')
                            return
                        }

                        //  若此次有更新title
                        if (payloadObj.title) {
                            //  同步 window.blog.title
                            $title.val(payloadObj.title)
                            //  關閉title更新鈕
                            $btn_updateTitle.prop('disabled', true)
                        }

                        //  重置 payload
                        payload.reset()
                        //  同步 window.blog
                        window.data.blog = { ...window.data.blog, ...data }

                        alert('blog save success!')

                        /*  取出要移除的 blogImgAlt_id  */
                        function removeAssociateImgs() {
                            let reg = /blogImgAlt=(?<blogImgAlt_id>\w+)/
                            //  複製一份 blogImgAlt
                            let _blogImgAlt = new Map([...window.data.blog.map_imgs])
                            //  找出[{src, alt, href}, ...]
                            window.editor.getElemsByType('image').forEach(({ src }) => {
                                let res = reg.exec(src)
                                if (!res) {
                                    return
                                }
                                _blogImgAlt.delete(res.groups.blogImgAlt_id * 1)
                            })
                            return [..._blogImgAlt.keys()]
                        }
                    }
                    //  初始化 editor
                    function init_editor() {
                        //  editor 的 繁中設定
                        wangEditor.i18nAddResources('tw', {
                            // 标题
                            header: {
                                title: '標題',
                                text: '文字',
                            },
                            blockQuote: {
                                title: '圖標'
                            },

                            // ... 其他语言词汇，下文说明 ...
                        })
                        wangEditor.i18nChangeLanguage('tw')
                        //  editor config
                        const { createEditor, createToolbar } = window.wangEditor
                        //  editor 相關配置
                        const editorConfig = {
                            placeholder = '請開始撰寫文章內容...',
                            //  每次editor焦點/內容變動時調用
                            onChange: handle_change,
                            MENU_CONF: {
                                //  關於 upload img 的配置
                                uploadImage: {
                                    //  圖片的上傳函數
                                    customUpload,
                                },
                                //  關於 edit img 的配置
                                editImage: {
                                    //  編輯前的檢查函數
                                    checkImage
                                }
                            }
                        }
                        //  editor 編輯欄 創建
                        const editor = createEditor({
                            //  插入後端取得的 html
                            html: window.data.blog.html || '',
                            selector: '#editor-container',
                            config: editorConfig,
                            mode: 'simple'
                        })
                        //  editor 工具欄 創建
                        const toolbar = createToolbar({
                            editor,
                            selector: '#toolbar-container',
                            mode: 'simple'
                        })
                        return editor
                        //  editor 的 修改圖片資訊前的檢查函數
                        async function checkImage(src, alt, url) {
                            //  修改
                            let reg = /blogImgAlt=(\w+)/
                            let res_reg = reg.exec(src)
                            let blogImgAlt_id = res_reg[1] * 1
                            let blog_id = window.data.blog.id
                            alt = my_xss(alt)
                            let { data: { errno, msg } } = await axios.patch('/api/blog/blogImgAlt', { blog_id, blogImgAlt_id, alt })
                            if (errno) {
                                return msg
                            }
                            window.data.blog.imgs.forEach((img, index, imgs) => {
                                if (img.id === blogImgAlt_id) {
                                    imgs[index].alt = alt
                                    window.data.blog.map_imgs.set(blogImgAlt_id, {
                                        ...window.data.blog.map_imgs.get(blogImgAlt_id), alt
                                    })
                                }
                            })
                            return true
                        }
                        //  editor的 自定義上傳圖片方法
                        async function customUpload(img, insertFn) {
                            let nameAndExt = getNameAndExt(img)
                            if (!nameAndExt) {
                                return
                            }
                            let { name, ext } = nameAndExt

                            //  生成 img 的 hash(hex格式)
                            let { hash, ...other } = await _getHash(img)

                            //  取得 img name & ext
                            function getNameAndExt(img) {
                                let reg = /^(?<name>.+)\.(?<ext>.*)$/
                                let res = reg.exec(img.name)
                                if (!res || !res.groups.name || !res.groups.ext) {
                                    alert('圖片格式錯誤！')
                                    return null
                                } else {
                                    res.groups.ext = res.groups.ext.toLowerCase().trim()
                                }
                                let { name, ext } = res.groups
                                //  校驗檔案格式
                                if (ext !== 'jpg' && ext !== 'png') {
                                    alert('只能傳jpg跟png啦!')
                                    return null
                                }
                                return { name, ext }
                            }
                            let res
                            let blog_id = window.data.blog.id
                            if (!other.blogImg_id) { // img為新圖，傳給後端建檔
                                //  imgName要作為query參數傳送，必須先作百分比編碼
                                name = encodeURIComponent(name)
                                let api = `${api_img}?hash=${hash}&name=${name}&ext=${ext}&blog_id=${blog_id}`
                                //  創建 formData，作為酬載數據的容器
                                let formdata = new FormData()
                                //  放入圖片數據
                                formdata.append('blogImg', img)
                                //  upload
                                res = await axios.post(api, formdata)
                            } else {    // img為重覆的舊圖，傳給後端新建一個blogImgAlt
                                res = await axios.post(api_createBlogImgAlt, { blog_id, blogImg_id: other.blogImg_id })
                            }

                            let {
                                data: {
                                    errno, data, msg
                                }
                            } = res

                            //  上傳失敗
                            if (errno) {
                                alert('上傳圖片失敗', msg)
                                return
                            }
                            //  上傳成功
                            if (other.blogImg_id) { //  img為舊圖
                                data = { ...other, ...data }
                            } else {    //  img為新圖
                                data.name = decodeURIComponent(data.name)
                            }
                            //  data格式: blogImgAlt { id, alt, img_id, url, hash, blogImg_id, blog_id, name }
                            //  同步數據
                            window.data.blog.imgs.push(data)
                            window.data.blog.map_imgs.set(data.id, ...data)
                            //  將圖片插入 editor
                            insertFn(`${data.url}?blogImgAlt=${data.id}`, data.name)

                            //  取得圖片的 hash
                            async function _getHash(img) {
                                //  取得 img 的 MD5 Hash(hex格式)
                                let hash = await _getMD5Hash(img)
                                let res = { hash }

                                let { imgs } = window.data.blog
                                if (!imgs.length) {
                                    return res
                                }
                                //  利用hash，確認img是否為舊圖
                                let exist = imgs.find(img => img.hash === hash)
                                if (!exist) {
                                    return res
                                }
                                return exist

                                //  計算 file 的 MD5 Hash
                                function _getMD5Hash(file) {
                                    return new Promise((resolve, reject) => {
                                        let fr = new FileReader()
                                        fr.addEventListener('load', (evt) => {
                                            if (fr.readyState === FileReader.DONE) {
                                                let hash = SparkMD5.ArrayBuffer.hash(fr.result)
                                                resolve(hash)
                                            }
                                        })
                                        fr.addEventListener('error', (error) => {
                                            reject(error)
                                        })
                                        fr.readAsArrayBuffer(file)
                                    })
                                }

                            }

                        }
                        //  handle：editor選區改變、內容改變時觸發
                        function handle_change() {
                            //  因為 editor 是 autoFocus，故handle_change 一開始便會被調用，也利用這點先為 payload 設置 html數據
                            let init = true
                            return (editor) => {
                                let htmlStr = editor.getHtml()
                                //  xss & 移除頭尾空行
                                htmlStr = xssAndRemoveEmpty(editorgetHtml)
                                //  初始化 payload.curHtml
                                if (init) {
                                    payload.set('curHtml', htmlStr)
                                    init = false
                                    return
                                }
                                if (htmlStr === payload.get('curHtml')) {   //  若htmlStr沒變化則不動作
                                    return
                                } else {    //  若htmlStr變化則更新
                                    payload.set('curHtml', htmlStr)
                                }
                                //  驗證htmlStr
                                let res = valicator({ html: htmlStr })
                                if (!res) {
                                    payload.setKVpairs({ html })
                                }
                            }

                            //  去除空格與進行xss
                            function xssAndRemoveEmpty(data) {
                                //  xss
                                let curHtml = my_xss(data.trim())
                                //  移除開頭、結尾的空格與空行
                                let reg_start = /^((<p><br><\/p>)|(<p>(\s|&nbsp;)*<\/p>))*/g
                                let reg_end = /((<p><br><\/p>)|(<p>(\s|&nbsp;)*<\/p>))*$/g
                                curHtml = curHtml.replace(reg_start, '')
                                curHtml = curHtml.replace(reg_end, '')
                                return curHtml
                            }
                        }
                    }
                }

                //  handle 修改文章是否公開的設定
                function handle_changeShow(e) {
                    let show = e.target.checked
                    let res = valicator({ show })
                    //  驗證成功，存入 payload
                    if (!res) {
                        payload.setKVpairs({ show })
                    }
                }
                //  handle updataTitle
                async function handle_updateTitle(e) {
                    let payloadData = {
                        id: window.data.blog.id,
                        title: payload.get('title')
                    }
                    let { data: { errno, msg, data } } = await axios.patch(api_blog, payloadData)
                    if (errno) {
                        alert(msg)
                        return
                    }
                    e.target.disabled = true
                    window.data.blog.title = title
                    payload.delete('title')
                }
                //  handle title的blur
                function handle_blur(e) {
                    let $el = $(e.target)
                    let v = $el.val().trim()
                    if (v === window.data.blog.title || !v) {
                        $el.removeClass('is-invalid')
                        payload.delete('title')
                        $el.val(window.data.blog.title)
                    }
                    return
                }
                //  handle 驗證 title
                function handle_input(e) {
                    let title = my_xss(e.target.value.trim())
                    let res = valicator({ title })
                    if (!res) {
                        payload.setKVpairs({ title })
                        $(e.target).removeClass('is-invalid')
                        $btn_updateTitle.prop('disabled', false)
                        return
                    }
                    $btn_updateTitle.prop('disabled', true)
                    $(e.target).addClass('is-invalid').attr('data-errno', '1').next().addClass('invalid-feedback').text(res[0].message)
                }



                //  初始化 valicator
                function init_valicator() {
                    let Ajv = window.ajv7
                    let ajv = new Ajv({ allErrors: true })
                    //  定義 keyword: diff
                    ajv.addKeyword({
                        keyword: 'diff',
                        type: ['string', 'number', 'boolean'],
                        schemaType: 'string',
                        validate: function _(inputName, newData) {
                            let curData = window.data.blog[inputName]
                            if (newData !== curData) {
                                return true
                            }
                            if (!_.errors) {
                                _.errors = []
                            }
                            _.errors.push({ keyword: 'diff' })
                            return false
                        },
                        errors: true
                    })
                    //  schema
                    let schema = {
                        type: 'object',
                        properties: {
                            title: {
                                type: 'string',
                                diff: 'title',
                                minLength: 1,
                                maxLength: 25

                            },
                            html: {
                                type: 'string',
                                diff: 'html',
                                minLength: 1,
                                maxLength: 65536
                            },
                            show: {
                                type: 'boolean',
                                diff: 'show'
                            }
                        },
                        minProperties: 1
                    }
                    //  生成驗證函數
                    let valicate = ajv.compile(schema)
                    //  返回驗證器
                    return (newData) => {
                        if (!valicate(newData)) {   //  代表非法
                            let list_inputNameAndMessage = valicate.errors.map(error => {
                                //  取得造成非法的相關資訊
                                let { inputName, message } = inputNameAndMessage(error)
                                //  移除payload非法的數據
                                payload.delete(inputName)
                                return { inputName, message }
                            })
                            return list_inputNameAndMessage
                        } else {    //  代表合法
                            return null
                        }
                    }
                    //  當valicate結果非法時，用來取得 { inputName, message } 
                    function inputNameAndMessage(error) {
                        let { instancePath, keyword, params } = error
                        let inputName = instancePath.slice(1)
                        let value = params ? [...Object.entries(params)][0][1] : undefined
                        let message
                        switch (keyword) {
                            case 'type':
                                message = `數據格式必須為${value}`
                                break
                            case 'minLength':
                                message = `不能少於${value}個字元`
                                break
                            case 'maxLength':
                                message = `不能多於${value}個字元`
                                break
                            case 'if':
                                message = '請寫內文，不然幹嘛公開文章'
                                break
                            case 'diff':
                                message = '與既有值相同，若沒有要更新就別鬧了'
                                break
                            case 'minProperties':
                                message = '沒有要變動就別亂'
                                break
                            default:
                                message = `錯誤訊息的keyword為${keyword} -- 未知的狀況`
                                break;
                        }
                        return { inputName, message }
                    }
                }

                //  utils ------
                //  檢查並返回當前表格數據
                function checkAndGetCurData() {
                    let payloadObj = [...payload.entries()].reduce((initVal, [k, v]) => {
                        if (k !== 'curHtml') {
                            initVal[k] = v
                        }
                        return initVal
                    }, {})

                    let errors = valicator(payloadObj)
                    if (!errors) {
                        return payloadObj
                    }
                    errors.forEach(({ message }) => alert(message))
                    return false
                }

                // 用來對表格內容進行xss
                function my_xss(html) {
                    return filterXSS(html, {
                        whiteList: {
                            ...filterXSS.whiteList,
                            div: ['data-w-e-type'],
                            input: ['type'],
                            img: ['src', 'alt', 'style', 'data-href']
                        },
                        //  若ele的tag與attr符合白名單，會進入此過濾函數
                        onTagAttr(tag, attr, attrVal, isW) {
                            let checkbbox = tag === 'input' && attr === 'type' && attrVal === 'checkbox'
                            let todoDiv = tag === 'div' && attr === 'data-w-e-type' && attrVal === 'todo'
                            let img = tag === 'img' && attr === 'src' || attr === 'alt' || attr === 'style' || attr === 'data-href'
                            if (checkbbox || todoDiv || img) {
                                //  返回的字符串會成為ele的attr與attrVal
                                return `${attr}="${attrVal}"`
                            }
                        },
                        //  若ele的tag不符合白名單，會進入此過濾函數
                        onIgnoreTag(tag, htmlStr) {
                            if (tag === 'x-img') {
                                return htmlStr
                            }
                        }
                    })
                }
                //  初始化 payload
                function init_Payload() {
                    let payload = new Map()
                    payload.setKVpairs = setKVpairs
                    payload.reset = reset
                    return payload

                    function setKVpairs(dataObj) {
                        //  將kv資料存入
                        if (dataObj) {
                            let kv = [...Object.entries(dataObj)][0]
                            let k = kv[0]
                            let v = kv[1]
                            payload.set(k, v)
                        }
                    }
                    function reset() {
                        let curHtml = payload.get('curHtml')
                        payload.clear()
                        payload.set('curHtml', curHtml)
                    }
                }
            })

        </script>
</body>

</html>