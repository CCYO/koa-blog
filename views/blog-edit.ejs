<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <div id="toolbar-container"></div>
    <div id="editor-container"></div>
    <button id="getHTML">GET HTML</button>
    <div id="user" style="display: none">
        <%- JSON.stringify(user) %>
    </div>
    <div id="blog" style="display: none">
        <%- JSON.stringify(blog) %>
        <!--
            [{ hex_md5, url}, ...
        -->
    </div>
    <%- include('wedgets/cdn') %>
    <%- include('wedgets/utils') %>
    <!-- 引入 css -->
    <link href="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/css/style.css" rel="stylesheet">
    <!-- 引入 js -->
    <script src="https://cdn.jsdelivr.net/npm/@wangeditor/editor@latest/dist/index.min.js"></script>
    <!-- 引入 Spark-MD5 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/spark-md5/3.0.2/spark-md5.min.js"></script>
    <script>
        let user = document.getElementById('user')
        let blog = document.getElementById('blog')
        eval('user = ' + user.innerText)
        eval('blog = ' + blog.innerText)
    </script>
    <script>
        wangEditor.i18nAddResources('tw', {
            // 标题
            header: {
                title: '標題',
                text: '文字',
            },
            blockQuote: {
                title: '圖標'
            },

            // ... 其他语言词汇，下文说明 ...
        })
        wangEditor.i18nChangeLanguage('tw')

        const { createEditor, createToolbar } = window.wangEditor
        const editorConfig = { MENU_CONF: {} }

        editorConfig.placeholder = '请输入内容'
        editorConfig.onChange = (editor) => {
            // 当编辑器选区、内容变化时，即触发
            console.log('content', editor.children)
            console.log('html', editor.getHtml())
        }
        editorConfig.MENU_CONF['uploadImage'] = {
            // 上传图片的配置
            //server: '/api/user/blog_img',
            async customUpload(file, insertFn) {
                //  計算出 img 的 md5Hash，是hex格式
                let md5Hash = await getMD5Hash(file)
                //  若blog.img_list有檔案
                if (blog && blog.img_list) {
                    //  利用 md5Hash 比對 blog 內是否已有該 img
                    let same = blog.img_list.filter(({ hex_md5: key }) => {
                        return md5Hash === key
                    })
                    //  若有，就直接取 blog 內的資料插入
                    if (same.length) {
                        insertFn(init_img_data(same[0].url, md5Hash))
                        alert('上傳完成，其實我說瞎話')
                        return
                    }
                }

                let formdata = new FormData()
                formdata.append(md5Hash, file)

                const { data: {
                    errno, data, msg
                } } = await axios.post(`/api/user/blog_img/${md5Hash}`, formdata)

                if (!errno) {
                    if(!blog.img_list) blog.img_list = []
                    blog.img_list.push({ ...data, hex_md5: md5Hash})
                    /*
                    * data { url, md5Hash }
                    */
                    var d = init_img_data(data.url, md5Hash)
                    console.log('@d => ', d)
                    insertFn(d.url, d.alt, d.href)
                } else {
                    console.log("ERR")
                }

                //  格式化要傳入 insertFn 的 imgData
                function init_img_data(url, md5_hash){
                    return {
                        url, href: url, alt: md5_hash
                    }
                }
                //  返回 file 的 FileReader.result
                function getMD5Hash(file) {
                    return new Promise((resolve, reject) => {
                        let fr = new FileReader()
                        fr.addEventListener('load', (evt) => {
                            if (fr.readyState === FileReader.DONE) {
                                let hash = SparkMD5.ArrayBuffer.hash(fr.result)
                                console.log('計算出的hash => ', hash)
                                resolve(hash)
                            }
                        })
                        fr.addEventListener('error', (error) => {
                            console.log('fr load 發生錯誤 => ', error)
                            reject(error)
                        })
                        fr.readAsArrayBuffer(file)
                    })
                }
            },
        }

        // 创建编辑器
        const editor = createEditor({
            html: '<p>hello <strong>world</strong></p>',
            selector: '#editor-container',
            config: editorConfig,
            mode: 'simple' // 或 'simple' 参考下文
        })
        // 创建工具栏
        const toolbar = createToolbar({
            editor,
            selector: '#toolbar-container',
            mode: 'simple' // 或 'simple' 参考下文
        })

        $('#getHTML').addEventListener('click', (e) => {
            var data_html = editor.getHtml()
            var data_text = editor.getText()
            let last_img_list = []
            editor.children.forEach(({ children }) => {
                children.forEach(item => {
                    if (item.type === 'image') last_img_list.push(item)
                })
            })
            const go_to_delete = img_list.filter((item) => {
                return !last_img_list.includes(item)
            })
            console.log('@last_img_list => ', last_img_list)
            console.log('@img_ist => ', img_list)
            console.log('@go_to_delete => ', go_to_delete)
            console.log('@data_html => ', data_html)
            console.log('@data_text => ', data_text)


        })
    </script>
</body>

</html>