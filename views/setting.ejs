<%- include('wedgets/header') %>

<style>
    .form-label {
        width: 100%;
        margin: 0;
        padding: .25rem;
    }

    .input-box {
        margin-top: .25rem;
        /* background: rgba(255, 255, 255, .5); */
        border-radius: .25rem;
    }

    .input-box:first-child {
        margin: 0;
    }

    .avatar-box {
        margin: 0 auto;
        max-width: 10rem;
    }

    @media(min-width: 768px) {
        .avatar-box {
            max-width: 13rem;
        }
    }
</style>

<div class="modal fade" id="origin_password_modal" tabindex="-1" aria-labelledby="origin_password_modal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">請先驗證原密碼</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="input-box">
                    <label class="form-label">原密碼
                        <input type="password" class="form-control" name="origin_password" data-retry='yes'
                            autocomplete="off">
                        <div class="d-none">&nbsp;</div>
                    </label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" id="checkOrginPassword" class="btn btn-primary">確定</button>
            </div>
        </div>
    </div>
</div>

<div class="container-md main">
    <h3>修改個人資訊</h3>
    <form class="row" id="setting">
        <div class="col-sm-8 mx-auto">
            <div class="input-box">
                <label class="form-label">信箱
                    <input type="text" class="form-control" name="email" aria-describedby="email_help"
                        autocomplete="off">
                    <div class="d-none">&nbsp;</div>
                </label>
            </div>

            <div class="input-box">
                <label class="form-label">新密碼
                    <input type="password" class="form-control" name="password" data-retry='yes' autocomplete="off">
                    <div class="d-none">&nbsp;</div>
                </label>
            </div>
            <div class="input-box">
                <label class="form-label">密碼確認
                    <input type="password" class="form-control" name="password_again" data-retry='yes'
                        autocomplete="off">
                    <div class="d-none">&nbsp;</div>
                </label>
            </div>
            <div class="input-box">
                <label for="nickname" class="form-label">暱稱
                    <input type="text" class="form-control" name="nickname" autocomplete="off">
                    <div class="d-none">&nbsp;</div>
                </label>
            </div>
            <div class="input-box">
                <label class="form-label">年齡
                    <input type="number" class="form-control" name="age" min="0" max="120">
                    <div class="d-none">&nbsp;</div>
                </label>
            </div>
            <div class="input-box">
                <span class="p-1">頭像</span>
                <div class="avatar-box">
                    <div class="ratio ratio-1x1">
                        <img id="avatar-img" src="" alt="">
                    </div>
                </div>
                <label class="form-label mt-1">
                    <input type="file" id="avatar" class="form-control" name="avatar" autocomplete="off">
                    <div class="d-none">&nbsp;</div>
                </label>

            </div>
            <button type="submit" name="submit" class="btn btn-primary mt-3">送出</button>
        </div>
    </form>
</div>

<div>
    <!-- 當前使用者頁面的使用者資料 -->
    <div data-my-data="currentUser" style="display: none;">
        <%- JSON.stringify(currentUser) %>
    </div>
</div>
<!-- JQ AXIOS BS5 -->
<%- include('wedgets/cdn') %>
<!-- 引入 Spark-MD5 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/spark-md5/3.0.2/spark-md5.min.js"></script>
<!-- 引入 Ajv -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/ajv/8.11.0/ajv7.min.js"
    integrity="sha512-NGcX0dMSiOACZ7t7BKTSSoL2vnVKAp5mG+M8gK1vZQGwJtzbLQba1eniSXdez+WfDtcrxBUEo143DV297oAnbw=="
    crossorigin="anonymous" referrerpolicy="no-referrer">
    </script>
<script type="module" defer>
    import validate from '/js/_validate.js'
    import initPageFn from '/js/initData.js'
    //  統整頁面數據、渲染頁面的函數
    import initNavbar from '/js/navbar.js'
    //  初始化 Navbar
    import initEJSData from '/js/initEJSData.js'
    //  初始化來自ejs在頁面上的字符數據
    try {
        loading()
        //  讀取中，遮蔽畫面
        let initPage = new initPageFn()
        await initPage.addOtherInitFn(initEJSData)
        //  初始化ejs
        await initPage.addOtherInitFn(initNavbar)
        //  初始化navbar
        await initPage.render(renderPage)
        //  統整頁面數據，並渲染需要用到統整數據的頁面內容
        loadEnd()
        //  讀取完成，解除遮蔽
    } catch (error) {
        throw error
        // location.href = `/errPage?errno=${encodeURIComponent('???')}&msg=${encodeURIComponent(error.message)}`
    }

    function renderPage(data) {
        /* ------------------------- 公用常數 ------------------------- */
        const CONST = {
            AVATAR_EXT: ['JPG', 'PNG'],
            AVATAR_SIZE: 1024 * 1024 * 1,
            // 1MB = 1024 KB = 1024 * 1024 Byte
            REG: {
                EXT: /\b.+\.(?<ext>\w+)\b/,
                BASE64URL: /\bdata:.*;base64,(?<avatar_base64>.*)/
            },
            API: {
                SETTING: '/api/user'
            }
        }
        /* ------------------------- 公用變量 ------------------------- */
        let $$pageData = data
        let $$me = $$pageData.me
        let $$payload = {}
        let $$api_avatar = CONST.API.SETTING
        /* ------------------------- 公用函數 ------------------------- */
        let $$fn_validateSetting = validate.setting
        let $$fn_validateAvatar = validate.avatar
        let $$fn_validateConfirmPassword = validate.password
        /* ------------------------- 公用 JQ Ele ------------------------- */
        let $avatar = $('#avatar')
        let $avatarImg = $('#avatar-img')
        let $submit = $('[type=submit]')
        let $settingForm = $('#setting')
        let $origin_password = $('[name=origin_password]')
        let $checkOrginPassword = $('#checkOrginPassword')
        let $newPasswordList = $('[name=password], [name=password_again]')
        let $model = $('#origin_password_modal')
        /* ------------------------- 公用 BS 原件 ------------------------- */
        let $bs_modal = new bootstrap.Modal($model)
        /* ------------------------- handle ------------------------- */
        $checkOrginPassword.on('click', handle_originPassword)
        $settingForm.on('submit', handle_Form)
        $avatar.on('change', handle_Avatar)
        $avatar.on('click', handle_resetAvatar)
        $newPasswordList.on('focus', handle_showModel)
        $model.on('shown.bs.modal', () => $origin_password.focus() )
        reset_placeholder()
        //  初始化 input placeholder
        /* ------------------------- handle Fn ------------------------- */
        //  顯示 origin_password 的 model
        function handle_showModel(e){
            e.preventDefault()
            if($$payload.origin_password){
                return
            }
            $bs_modal.show()
        }
        //  重新選擇要上傳的頭像
        function handle_resetAvatar(e) {
            e.preventDefault()
            if (!$avatar.prop('files')[0]) {
                return
            }
            if (confirm('要重新傳一顆頭嗎?')) {
                //  重設頭像表格
                previewAvatar()
            } else {
                e.preventDefault()
            }
        }
        //  設置 avatar 相關資訊
        async function handle_Avatar() {
            let files = $avatar.prop('files')
            let file = files[0]
            if (files.length > 1) {
                /*  限制上傳一張圖 */
                previewAvatar('你只有一顆頭，不要太貪心好嗎')
                return
            } else if (file.size > CONST.AVATAR_SIZE) {
                // File.size的單位是 Byte
                previewAvatar('你的頭太大了，只能1MB以下!')
                return
            }
            /* 取得副檔名 */
            let { ext, msg } = _getExt(file.name)
            if (msg) {
                previewAvatar(msg)
                return
            }
            //  確認avatar 是否同既有 avatar
            let arrayBuffer = await _getArrayBuffer(file)
            let avatar_hash = SparkMD5.ArrayBuffer.hash(arrayBuffer)
            if (avatar_hash === $$me.avatar_hash) {
                previewAvatar('你的頭現在就是這樣啦! ok?')
                return
            }
            let base64Url = await _getDataURL(file)
            let reg_res = CONST.REG.BASE64URL.exec(base64Url)
            if (!reg_res) {
                previewAvatar('解析base64Url失敗')
                return
            }
            let { avatar_base64 } = reg_res.groups
            let validateErrs = await $$fn_validateAvatar({ avatar_hash, avatar_base64, $$me })
            if (validateErrs) {
                let msg = ''
                for (let inputName in validateErrs) {
                    msg += validateErrs[inputName]
                }
                previewAvatar(msg)
                return
            }
            let avatar = { file, ext, hash: avatar_hash, base64Url }
            previewAvatar(avatar)
        }
        //  設置原密碼
        async function handle_originPassword(e) {
            e.preventDefault()
            let inp = $origin_password[0]
            let origin_password = inp.value
            let validateErrs = await $$fn_validateConfirmPassword({ origin_password })
            if (validateErrs) {
                feedback_UI(inp, false, validateErrs.origin_password)
                return
            }
            feedback_UI(inp, true, '')
            $$payload.origin_password = origin_password
            //  取消 handle
            $bs_modal.hide()
            //  隱藏 model
        }
        //  設置表單數據
        async function validateForm(e) {
            e.preventDefault()
            let form = $settingForm[0]
            let invalidInps = []
            // 「無效數據」表格列表
            let validInps = new Set()
            // 「有效數據」表格列表
            for (let input of form) {
                /* 蒐集表單內數據(除了 avatar, orgin_password，他們有各別的 handle)*/
                let { name, value } = input
                if (input.type === 'submit' || input.type === 'file') {
                    /* 忽略 submit 與 file */
                    continue
                }
                if (!value) {
                    /* 無值則刪除現有數據 */
                    delete $$payload[name]
                    feedback_UI(input, 'empty')
                    continue
                }
                if (name === 'age') {
                    /* 轉換成數字 */
                    value *= 1
                }
                validInps.add(input)
                //  將 input 先都加入「有效數據」表格
                $$payload[name] = value
                //  將所有數據納入 $$payload
            }
            let _payload = { ...$$payload }
            let validateErrs = await $$fn_validateSetting({ ..._payload, $$me })
            //  驗證（$me作為不能重覆現有數據的比對值）
            if (validateErrs) {
                /* 處理發生的錯誤 validateErrs { inputName: 錯誤訊息 }*/
                if (validateErrs.all) {
                    /* 若 inputName 含有 all，代表 $$payload 根本沒有數據 */
                    e.type === 'submit' && alert(validateErrs.all)
                    //  若是 submit 事件，才顯示提醒
                    return
                }
                for (let inputName in validateErrs) {
                    let input = $settingForm.find(`input[name=${inputName}]`)[0]
                    //  根據 validateErr Item 的 inputName 取得 input
                    let msg = validateErrs[inputName]
                    //  錯誤訊息
                    if (inputName !== 'origin_password') {
                        //  若不是 原密碼 input 則刪除、添加 驗證表單的 handle
                        input.removeEventListener('input', validateForm)
                        input.addEventListener('input', validateForm)
                    }
                    invalidInps.push({ input, msg })
                    // 「無效數據」表格列表存入 input 與 錯誤訊息 數據
                    validInps.delete($(`input[name=${inputName}]`)[0])
                    //  將 input 從「有效數據」表格列表內刪除 
                }
            }
            for (let { input, msg } of invalidInps) {
                /* 處理 「無效數據」表格列表 的 input 相關事項*/
                let inputName = input.name
                delete $$payload[inputName]
                //  刪除 $$payload 內相關數據
                feedback_UI(input, false, msg)
                //  渲染 input 數據無效的提醒
            }
            if (e.type !== 'submit' || invalidInps.length) {
                /* 如果不是 submit 事件，或是 存在「無效數據」表格，要處理相關事項 */
                for (let input of validInps) {
                    feedback_UI(input, true, '')
                    //  渲染 input 數據有效的提醒
                }
            }
            /* 根據是否 存在「無效數據」表格，反映這次驗證是否通過 */
            return !invalidInps.length
        }
        //  送出請求
        async function handle_Form(e) {
            e.preventDefault()
            if (!await validateForm(e)) {
                /* 若表單數據沒通過驗證，則停止 */
                return
            }
            if($$payload.origin_password && (!$$payload.password && !$$payload.again_password) ){
                delete $$payload.origin_password
            }
            console.log('axxios --- $$payload => ', $$payload)
            
            let formData = new FormData()
            for (let prop in $$payload) {
                /* 整理要更新的請求數據 */
                let data = $$payload[prop]
                formData.append(prop, data)
            }
            let { data } = await axios.patch($$api_avatar, formData)
            //  清空avatar數據
            previewAvatar()
            for (let prop in $$payload) {
                /* 針對完成更新的數據表格 渲染提醒 */
                let input = $(`[name=${prop}]`)[0]
                if (!input) {
                    continue
                }
                feedback_UI(input, true, '')
            }
            $$payload = {}
            //  清空 payload
            for (let prop in data) {
                /* 同步 $$me 數據 */
                $$me[prop] = data[prop]
            }
            document.addEventListener('click', () => {
                /* 當頁面被點擊，隨即取消所有表單提醒，並重整 placeholder */
                feedback_UI(false)
                reset_placeholder()
            }, { once: true })
            alert('資料更新完成!')
        }
        /* ------------------------- Utils ------------------------- */
        //  顯示 placeholder
        function reset_placeholder() {
            $settingForm[0].reset()
            for (let prop in $$me) {
                if (prop === 'avatar') {
                    //  顯示頭像預覽
                    $avatarImg.attr('src', $$me[prop])
                    continue
                }
                //  將現有數據放入頁面
                $settingForm.find(`input[name=${prop}]`).attr('placeholder', $$me[prop])
            }
        }
        //  表格數據有/無效提醒
        function feedback_UI(inp, valid, msg) {
            if (inp === false) {
                for (let form of $('form')) {
                    for (let inp of form) {
                        $(inp).removeClass('is-invalid is-valid')
                        $(inp).next().removeClass('invalid-feedback valid-feedback myshow').text('')
                    }
                }
            } else if (valid === 'load') {
                //  驗證中
                $(inp).next().toggleClass('my-show', true).text('loading...')
            } else if (valid === 'empty') {
                $(inp).removeClass('is-invalid is-valid')
                $(inp).next().removeClass('invalid-feedback valid-feedback myshow').text('')
            } else if (valid) {
                //  驗證成功
                $(inp).removeClass('is-invalid').addClass('is-valid')
                $(inp).next().removeClass('invalid-feedback').addClass('valid-feedback d-none').text(msg)
            } else {
                //  驗證失敗
                $(inp).removeClass('is-valid').addClass('is-invalid')
                $(inp).next().removeClass('valid-feedback d-none').addClass('invalid-feedback').text(msg)
            }
        }
        //  預覽 avatar
        function previewAvatar(data) {
            if (typeof data === 'object') {
                let { file, ext, hash, base64Url } = data
                $$api_avatar += `?hash=${hash}&ext=${ext}`
                $$payload.avatar_hash = hash
                $$payload.avatar = file
                $avatarImg.attr('src', base64Url)
                feedback_UI($avatar, true, '')
            } else {
                $avatarImg.attr('src', $$me.avartar)
                delete $$payload.avartar
                delete $$payload.hash
                $$api_avatar = CONST.API.SETTING
                feedback_UI($avatar, 'empty')
                typeof data === 'string' && alert(data)
            }
            $avatar.val('')
        }
        /* ------------------------- _Fn ------------------------- */
        //  計算預覽圖
        function _getDataURL(file) {
            return new Promise((resolve, reject) => {
                let fr = new FileReader()
                fr.addEventListener('load', (evt) => {
                    if (fr.readyState === FileReader.DONE) {
                        let base64Url = fr.result
                        resolve(base64Url)
                    }
                })
                fr.addEventListener('error', (error) => {
                    reject(error)
                })
                fr.readAsDataURL(file)
            })
        }
        //  計算 arrayBuffer
        function _getArrayBuffer(file) {
            return new Promise((resolve, reject) => {
                let fr = new FileReader()
                fr.addEventListener('load', (evt) => {
                    if (fr.readyState === FileReader.DONE) {
                        resolve(fr.result)
                    }
                })
                fr.addEventListener('error', (error) => {
                    reject(error)
                })
                fr.readAsArrayBuffer(file)
            })
        }
        //  取得附檔名
        function _getExt(file) {
            //  校驗檔案格式(jpg png)
            let regRes = CONST.REG.EXT.exec(file.name)
            let ext = undefined
            let msg = undefined
            if (regRes) {
                ext = res.groups.ext.toUpperCase()
            }
            if (!CONST.AVATAR_EXT.some(avatarExt => avatarExt === ext)) {
                msg = `僅接受 ${CONST.AVATAR_EXT.join()} 格式`
            }
            return { ext, msg }
        }
    }


</script>
</body>

</html>