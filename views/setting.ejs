<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <!-- BS5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
</head>

<body>
    <%- include('wedgets/navbar/index') %>
    <div class="container">
        <h3>修改個人資訊</h3>
        <form class="row">
            <div class="col-8 mx-auto">
                <div class="mb-3">
                    <label class="form-label w-100">信箱
                        <input type="text" class="form-control" name="email" aria-describedby="email_help"
                            autocomplete="off">
                        <div class="d-block">&nbsp;</div>
                    </label>
                </div>
                <div class="mb-3">
                    <label class="form-label w-100">密碼
                        <input type="password" class="form-control" name="password" data-retry='yes'
                            autocomplete="new-password">
                        <div class="d-block">&nbsp;</div>
                    </label>
                </div>
                <div class="mb-3">
                    <label for="nickname" class="form-label">暱稱
                        <input type="text" class="form-control" name="nickname" autocomplete="off">
                        <div class="d-block">&nbsp;</div>
                    </label>
                </div>
                <div class="mb-3">
                    <label class="form-label w-100">年齡
                        <input type="number" class="form-control" name="age" autocomplete="off">
                        <div class="d-block">&nbsp;</div>
                    </label>
                </div>
                <div class="mb-3">
                    <label class="form-label w-100">頭像
                        <input type="file" id="avatar" class="form-control" name="avatar" autocomplete="off">
                        <div class="d-block">&nbsp;</div>
                    </label>
                </div>
                <button type="submit" class="btn btn-primary">送出</button>
            </div>
        </form>
    </div>

    <%- include('wedgets/cdn') %>
    <!-- 引入 Spark-MD5 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/spark-md5/3.0.2/spark-md5.min.js"></script>
    <!-- 引入 Ajv -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ajv/8.11.0/ajv7.min.js"
        integrity="sha512-NGcX0dMSiOACZ7t7BKTSSoL2vnVKAp5mG+M8gK1vZQGwJtzbLQba1eniSXdez+WfDtcrxBUEo143DV297oAnbw=="
        crossorigin="anonymous" referrerpolicy="no-referrer">
        </script>
    <script>
        $(function () {
            window.payload = {
                hash: undefined,    //  存放 $avatar 檔案的 hash
            }

            let reg_ext = /.+\.(.*)$/

            let $avatar = $('#avatar')
            let $form = $('form').first()
            let $submit = $('[type=submit]')

            $submit.prop('disabled', true)
            window.valicate = init_valicate()

            let $listOfPayload = $('input:not([type=file])')

            $listOfPayload.on('input', handle_valicator)

            let errorMsg = {
                email: {
                    pattern: '必須符合email格式'
                },
                nickname: {
                    pattern: '必須由是中文或英文組成',
                    minLength: '必須2個字以上',
                    maxLength: '必須20個字以下',
                },
                password: {
                    pattern: '只能由數字、英文、底線_組成',
                    minLength: '必須6個字以上',
                    maxLength: '必須32個字以下',
                },
                age: {
                    minimum: '年齡必須大於0，且只能是整數',
                    maximum: '年齡必須小於120，且只能是整數'
                }
            }

            //  valicatorForInp
            function handle_valicator(e) {
                let me = window.data.me
                let $el = $(e.target)
                let key = $el.attr('name')
                let val = $el.val().trim()

                if (!val) {   //  如果沒有值，那就沒事
                    //  移除提醒
                    UI_valiate($el)
                    return
                }

                if (key === 'age') {    //  如果是age，將類型轉為number
                    val *= 1
                }

                if (val === me[key]) {  //  如果是既有值，發生錯誤
                    //  顯示錯誤提醒
                    UI_valiate($el, false, '現在就是了，賣鬧')
                    return
                }

                //  如果是有效值，使用ajv校驗
                let res = window.valicate({ [key]: val })
                //  若校驗有問題
                if (res) {
                    console.log(res)
                    let [{ keyword }] = res
                    //  顯示錯誤提醒
                    UI_valiate($el, false, errorMsg[key][keyword])
                    return
                }

                //通過校驗，顯示ok提醒
                UI_valiate($el, true)
                console.log(`window.payload[${key}] => `, window.payload[key])
            }



            $avatar.on('click', resetFile)
            $avatar.on('change', getImgHash)

            $form.on('submit', update)

            //  送出更新數據
            async function update(e) {
                e.preventDefault()
                let { hash } = window.payload
                let formData = new FormData()

                let api_user = '/api/user'

                if (hash) { //  若要更新頭像
                    
                }

                let json = undefined
                
                //  
                for (item of e.target) {
                    let { type, name, value } = item
                    if(!value){
                        continue
                    }
                    
                    if(name === 'age'){
                        value *= 1
                    }

                    if (type === 'file' ) {

                        let img = item.files && item.files[0]
                        
                        api_user += `?avatar_hash=${hash}`
                        // let img = item.files[0]
                        
                        let ext = reg_ext.exec(img.name)[1]
                        formData.append('avatar', img)
                    } else if (type !== 'submit' && value) {    
                        let err = window.valicate({ [name]: value })

                        if (err) {
                            alert(`${name}格式有誤`)
                            return
                        }
                        formData.append(name, value)
                    }
                }
return

                let {
                    data: {
                        errno,
                        data,
                        msg
                    }
                } = await axios.patch(api_user, formData)

                if (errno) {
                    alert(msg)
                } else {
                    console.log(data)
                    window.data.me = data
                    alert('資料更新完成!')
                }
            }

            //  取得 $avatar 的 hash
            async function getImgHash() {
                let { avatar, avatar_hash } = window.data.me
                let file = $avatar.prop('files')[0]

                //  確認更新的 avatar 是否與原 avatar 相同
                let hash = await _getMD5Hash(file)

                if (hash !== avatar_hash) {
                    UI_valiate($avatar, true)
                    window.payload.hash = hash
                    return
                }
                $avatar.val('')
                window.payload.hash = undefined
                console.log('清空了')
                console.log($avatar.prop('files'))
                alert('你的頭現在就是這樣啦! ok?')





                return
            }

            //  返回 file 的 FileReader.result
            function _getMD5Hash(file) {
                return new Promise((resolve, reject) => {
                    let fr = new FileReader()
                    fr.addEventListener('load', (evt) => {
                        if (fr.readyState === FileReader.DONE) {
                            let hash = SparkMD5.ArrayBuffer.hash(fr.result)
                            console.log('計算出的hash => ', hash)
                            resolve(hash)
                        }
                    })
                    fr.addEventListener('error', (error) => {
                        console.log('fr load 發生錯誤 => ', error)
                        reject(error)
                    })
                    fr.readAsArrayBuffer(file)
                })
            }

            //  清空 input[type=file] #avatar
            function resetFile() {
                
                if ($avatar.prop('files')[0]) {
                    confirm('要重新傳一顆頭嗎?') && $avatar.val('')
                    window.payload.hash = undefined
                }

            }


            function init_valicate() {
                let Ajv = window.ajv7
                let ajv = new Ajv()

                let regg = '^[a-z0-9][a-z0-9-_\.]+@([a-z]|[a-z0-9]?[a-z0-9-]+[a-z0-9])\.[a-z0-9]{2,10}(?:\.[a-z]{2,10})?$'
                const schema_common = {
                    type: 'object',
                    properties: {
                        email: {
                            type: 'string',
                            pattern: regg
                            // format: 'email',
                            // errorMessage: 'email必須是電子信箱格式'
                        },
                        nickname: {
                            type: 'string',
                            // pattern: '^[\\w]+$',
                            pattern: '^[\\u4e00-\\u9fa5\\w]+$',
                            minLength: 2,
                            maxLength: 20,
                            // errorMessage: '必須是英文、數字以及底線組成，必須小於20個字符'
                        },
                        password: {
                            type: 'string',
                            pattern: '^[\\w]+$',
                            minLength: 6,
                            maxLength: 32,
                            // errorMessage: '必須是英文、數字以及底線組成，長度須介於6-32個字符'
                        },
                        age: {
                            type: 'number',
                            minimum: 1,
                            maximum: 120,
                            // errorMessage: '必須是數字，介於1-120之間'
                        }
                    }
                }

                let valicator = ajv.compile(schema_common)

                return (data) => {
                    if (!valicator(data)) {
                        return valicator.errors
                    }
                    return null
                }
            }

            //  
            //  input 數據的校驗UI
            //  要有一個值，作為要顯示的狀態
            //  去除所有顯示
            //  錯誤顯示
            //  正確顯示
            function UI_valiate($inp, status, msg) {
                // $inp.next().toggleClass('my-show', true).text('loading...')
                switch (status) {
                    case true:  //  valid
                        $inp.removeClass('is-invalid').addClass('is-valid')
                        $inp.next().removeClass('invalid-feedback myshow').addClass('valid-feedback').text(msg)
                        break
                    case false: //  invalid
                        $inp.removeClass('is-valid').addClass('is-invalid')
                        $inp.next().removeClass('valid-feedback myshow').addClass('invalid-feedback').text(msg)
                        break
                    default:    //  empty
                        $inp.removeClass('is-valid is-invalid')
                        $inp.next().removeClass('invalid-feedback valid-feedback myshow').text('')
                }
                //  UI submit
                valicator_submit()
            }

            //  目前的資料，有資格送出了嗎
            //  資料需要
            //  .valid .invalid 有多少個
            //  valicator for submit button 的 disabled
            function valicator_submit() {
                let num_valid = 0
                let num_invalid = 0
                $('input').each((index, item) => {
                    console.log(item, $(item).hasClass('is-invalid'))
                    $(item).hasClass('is-valid') && num_valid++
                    $(item).hasClass('is-invalid') && num_invalid++
                })
                console.log(num_valid, num_invalid)
                let ok = num_valid > 0 && num_invalid < 1
                console.log(ok)
                $submit.prop('disabled', !ok)
            }



        })
    </script>
</body>

</html>