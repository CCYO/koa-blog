<%- include('wedgets/common/header') %>

<body>
    <!-- 主導覽： NAV_CSS + NAV第一層template -->
    <%- include('wedgets/navbar/index') %>
    <div class="container">
        <h3>修改個人資訊</h3>
        <form class="row">
            <div class="col-8 mx-auto">
                <div class="mb-3">
                    <label class="form-label w-100">信箱
                        <input type="text" class="form-control" name="email" aria-describedby="email_help"
                            autocomplete="off">
                        <div class="d-block">&nbsp;</div>
                    </label>
                </div>
                <div class="mb-3">
                    <label class="form-label w-100">密碼
                        <input type="password" class="form-control" name="password" data-retry='yes'
                            autocomplete="new-password">
                        <div class="d-block">&nbsp;</div>
                    </label>
                </div>
                <div class="mb-3">
                    <label for="nickname" class="form-label">暱稱
                        <input type="text" class="form-control" name="nickname" autocomplete="off">
                        <div class="d-block">&nbsp;</div>
                    </label>
                </div>
                <div class="mb-3">
                    <label class="form-label w-100">年齡
                        <input type="number" class="form-control" name="age" autocomplete="off">
                        <div class="d-block">&nbsp;</div>
                    </label>
                </div>
                <div class="mb-3">
                    <img id="avatar-img" src="" alt="">
                    <label class="form-label w-100">頭像
                        <input type="file" id="avatar" class="form-control" name="avatar" autocomplete="off">
                        <div class="d-block">&nbsp;</div>
                    </label>
                </div>
                <button type="submit" class="btn btn-primary">送出</button>
            </div>
        </form>
    </div>
    <!-- 當前使用者頁面的使用者資料 -->
    <div data-my-data="currentUser">
        <%- JSON.stringify(currentUser) %>
    </div>
    <%- include('wedgets/cdn') %>
    <!-- 引入 Spark-MD5 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/spark-md5/3.0.2/spark-md5.min.js"></script>
    <!-- 引入 Ajv -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ajv/8.11.0/ajv7.min.js"
        integrity="sha512-NGcX0dMSiOACZ7t7BKTSSoL2vnVKAp5mG+M8gK1vZQGwJtzbLQba1eniSXdez+WfDtcrxBUEo143DV297oAnbw=="
        crossorigin="anonymous" referrerpolicy="no-referrer">
        </script>
    <!-- 初始化來自ejs傳入當前頁面所需的數據 -->
    <script defer src="/js/initData.js"></script>

    <!--
        logout功能 +
        完整渲染 NAV +
        取得news +
        完整渲染 通知下拉選單
    -->
    <script defer src="/js/navbar.js"></script>
    <script>
        $(async function () {


            try {
                await init()
                console.log('@ 關於頁面內的初始化皆已完成')
            } catch (err) {
                console.log('@ init 發生錯誤 => ', err)
            }

            async function init() {
                //  初始化 ejs 附加、用於此頁面的數據
                await window._my.initData()
                console.log('@ 已確認頁面所需數據皆已初始化完成')

                //  用來存放 upload 時的 avatar 數據
                window.payload = {
                    hash: undefined,
                    ext: undefined,
                    api: '/api/user'
                }

                let $avatar = $('#avatar')
                let $avatarImg = $('#avatar-img')
                let $submit = $('[type=submit]')

                //  初始化 input placeholder
                reset_placeholder()
                //  初始化 input 資料校驗器
                let valicate = init_valicatorForInput()

                //  除了 avatar =以外的input，綁定 handle: 驗證資料是否有效
                $('input:not([type=file])').on('input', handle_valicate)
                $avatar.on('click', handle_resetAvatar)
                $avatar.on('change', handle_valicator_avatar)
                $('form').first().on('submit', handle_update)

                //  送出要更新的數據
                async function handle_update(e) {
                    e.preventDefault()
                    let { hash } = window.payload
                    let formData = new FormData()
                    let valid = true

                    //  el 為 表單中每一個input
                    for (el of e.target) {
                        let $el = $(el)
                        let { type, name, value } = el

                        if (!value) {
                            continue
                        }

                        //  將age轉為有效的整數
                        if (name === 'age') {
                            let num
                            try {
                                num = Number.parseInt(value)
                            } catch (err) {
                                $el.val()   //  清空表單
                                UI_input($el, false, '請輸入整數，賣鬧') //  顯示錯誤提醒
                                valid = false
                            }
                            $el.val(num)
                            value = num
                        }

                        //  將submit與avatar以外的input都效驗一遍
                        if (type !== 'submit' && name !== 'avatar') {
                            let kv = { [name]: value }
                            if (!valicate(kv)) {
                                valid = false
                            }
                        }

                        //  如果是既有值，顯示錯誤提醒
                        if (name !== 'avatar' && value === window.data.me[name]) {
                            UI_input($el, false, '現在就是了，賣鬧')
                            valid = false
                        }

                        //  完成以上驗證，存入formdata
                        let data = name === 'avatar' ? el.files[0] : value
                        formData.append(name, data)

                    }
                    
                    //  取出 更新表格的name
                    let keys = [...formData.keys()]
                    //  若沒有要更新的資料，警告
                    if (!keys.length) {
                        alert('沒有要更新的就別亂')
                        valid = false
                    }

                    //  驗證失敗，則停止更新動作
                    if (!valid) {
                        delete formData
                        return
                    }

                    let {
                        data: {
                            errno,
                            data,
                            msg
                        }
                    } = await axios.patch(window.payload.api, formData)

                    if (errno) {
                        console.log('GET ERROR')
                        alert(msg)
                        return
                    }
                    
                    delete formData
                    //  清空avatar數據
                    resetAvatar()
                    //  input顯示更新完成
                    for (let key of keys) {
                        UI_input($(`input[name=${key}]`), true, '更新完成')
                    }
                    //  同步數據
                    window.data.me = data
                    reset_placeholder()
                    alert('資料更新完成!')
                }
                //  設置 avatar 相關資訊
                async function handle_valicator_avatar() {
                    let { avatar_hash } = window.data.me

                    //  限制上船一張圖
                    let files = $avatar.prop('files')
                    if (files.length > 1) {
                        resetAvatar('你只有一顆頭，不要太貪心好嗎')
                        return
                    }

                    let file = $avatar.prop('files')[0]
                    //  取得副檔名
                    let ext = _getExt(file)
                    if (ext !== 'jpg' && ext !== 'png') {
                        resetAvatar('只能傳jpg跟png啦!')
                        return
                    }

                    //  確認avatar 是否同既有 avatar 
                    let hash = await _getMD5Hash(file)
                    if (hash === avatar_hash) {
                        resetAvatar('你的頭現在就是這樣啦! ok?')
                        return
                    }

                    //  通過校驗
                    UI_input($avatar, true)
                    //  同步 window.payload
                    window.payload = { hash, ext, api: `${window.payload.api}?hash=${hash}&ext=${ext}` }

                    //  計算 avatar hash
                    function _getMD5Hash(file) {
                        return new Promise((resolve, reject) => {
                            let fr = new FileReader()
                            fr.addEventListener('load', (evt) => {
                                if (fr.readyState === FileReader.DONE) {
                                    let hash = SparkMD5.ArrayBuffer.hash(fr.result)
                                    console.log('計算出的hash => ', hash)
                                    resolve(hash)
                                }
                            })
                            fr.addEventListener('error', (error) => {
                                console.log('fr load 發生錯誤 => ', error)
                                reject(error)
                            })
                            fr.readAsArrayBuffer(file)
                        })
                    }
                    function _getExt(file) {
                        //  副檔名regux
                        let reg_ext = /.+\.(.*)$/
                        //  校驗檔案格式(jpg png)
                        return reg_ext.exec(file.name)[1].toLowerCase()
                    }
                }
                //  重新選擇要上傳的頭像
                function handle_resetAvatar(e) {
                    if (!$avatar.prop('files')[0]) {
                        return
                    }
                    if (confirm('要重新傳一顆頭嗎?')) {
                        $avatarImg.attr('src', window.data.me.avartar)
                        //  重設頭像表格
                        resetAvatar()
                    } else {
                        e.preventDefault()
                    }
                }
                //  重製 window.payload 與 input[type=file]
                function resetAvatar(msg) {
                    $avatar.val('')
                    window.payload = {
                        hash: undefined,
                        ext: undefined,
                        api: '/api/user'
                    }
                    if (msg) {
                        UI_input($avatar, false, msg)
                    } else {
                        UI_input($avatar)
                    }

                }
                //  驗證 input 資料(除了avatar)
                async function handle_valicate(e) {
                    let me = window.data.me
                    let $el = $(e.target)
                    let key = $el.attr('name')
                    let val = $el.val().trim()

                    //  若無值
                    if (!val) {
                        //  移除提醒
                        UI_input($el)
                        return
                    }

                    //  如果是age，將類型轉為number
                    if (key === 'age') {
                        let n
                        try {
                            n = Number.parseInt(val)    //  轉化為數值
                        } catch (err) { //  若為無效值，reset + 提醒
                            $el.val()
                            UI_input($el, false, '請輸入整數，賣鬧')
                            return
                        }
                        //  設為有效值，並重新聚焦(會用blur在focus，是因為我只用focus沒反應)
                        $el.val(n).blur().focus()
                    }

                    //  如果是既有值，顯示錯誤提醒
                    if (val === me[key]) {
                        UI_input($el, false, '現在就是了，賣鬧')
                        return
                    }

                    //  如果是有效值，使用ajv校驗
                    let kv = { [key]: val }
                    let ok = valicate(kv)

                    if(!ok){
                        return
                    }

                    //  若email已被註冊，顯示錯誤提醒
                    if (key === 'email') {
                        let { data: { errno, msg } } = await axios.post('/api/user/isEmailExist', { email: val })
                        if (errno) {
                            UI_input($el, false, msg)
                            return
                        }
                    }
                }


                //  utils -----------

                //  UI input有效值提醒 
                function UI_input($inp, status, msg) {
                    switch (status) {
                        case true:  //  valid
                            $inp.removeClass('is-invalid').addClass('is-valid')
                            $inp.next().removeClass('invalid-feedback myshow').addClass('valid-feedback').text( msg ? msg : 'ok')
                            break
                        case false: //  invalid
                            $inp.removeClass('is-valid').addClass('is-invalid')
                            $inp.next().removeClass('valid-feedback myshow').addClass('invalid-feedback').text(msg)
                            break
                        default:    //  empty
                            $inp.removeClass('is-valid is-invalid')
                            $inp.next().removeClass('invalid-feedback valid-feedback myshow').text('')
                    }
                    //  UI submit權限
                    valicate_submit()
                }

                //  UI submit權限
                function valicate_submit() {
                    let num_valid = 0
                    let num_invalid = 0
                    $('input').each((index, item) => {
                        $(item).hasClass('is-valid') && num_valid++
                        $(item).hasClass('is-invalid') && num_invalid++
                    })
                    let ok = num_valid > 0 && num_invalid < 1

                    $submit.prop('disabled', !ok)
                }

                //  UI input值同步 window.data.me
                function reset_placeholder() {
                    $('form')[0].reset()
                    for (let prop in window.data.me) {
                        if (!window.data.me) {
                            continue
                        }
                        if (prop === 'avatar') {
                            $avatarImg.attr('src', window.data.me.avatar)
                        }
                        $(`input[name=${prop}]`).attr('placeholder', window.data.me[prop])
                    }
                }

                //  input有效值驗證器(除了avatar以外的資料)
                function init_valicatorForInput() {
                    $submit.prop('disabled', true)

                    let Ajv = window.ajv7
                    let ajv = new Ajv()

                    //  驗證用schema
                    const schema_common = {
                        type: 'object',
                        properties: {
                            email: {
                                type: 'string',
                                pattern: '^[a-z0-9][a-z0-9-_\\.]+@([a-z]|[a-z0-9]?[a-z0-9-]+[a-z0-9])\\.[a-z0-9]{2,10}(?:\\.[a-z]{2,10})?$'
                            },
                            nickname: {
                                type: 'string',
                                // pattern: '^[\\w]+$',
                                pattern: '^[\\u4e00-\\u9fa5a-zA-Z\\d]+$',
                                minLength: 2,
                                maxLength: 20,
                            },
                            password: {
                                type: 'string',
                                pattern: '^[\\w]+$',
                                minLength: 6,
                                maxLength: 32,
                            },
                            age: {
                                type: 'number',
                                minimum: 1,
                                maximum: 120,
                            }
                        }
                    }

                    //  無效值的錯誤提醒
                    let errorMsg = {
                        email: {
                            pattern: '必須符合email格式'
                        },
                        nickname: {
                            pattern: '必須由是中文或英文組成',
                            minLength: '必須2個字以上',
                            maxLength: '必須20個字以下',
                        },
                        password: {
                            pattern: '只能由數字、英文、底線_組成',
                            minLength: '必須6個字以上',
                            maxLength: '必須32個字以下',
                        },
                        age: {
                            minimum: '年齡必須大於0，且只能是整數',
                            maximum: '年齡必須小於120，且只能是整數'
                        }
                    }

                    //  客製化的驗證器
                    let valicator = ajv.compile(schema_common)

                    //  若傳入驗證器的Kv-obj為無效值，則會返回錯誤提醒
                    return (data) => {
                        let key = Object.keys(data)[0]
                        let val = data[key]
                        if(key === 'age'){
                            val *= 1
                        }
                        let ok = valicator({key, val})
                        let $el = $(`[name=${key}]`)
                        if (ok) {
                            UI_input($el, true)
                            return true
                        }
                        let [{ keyword }] = valicator.errors
                        let msg = errorMsg[key][keyword]
                        UI_input($el, false, msg)
                        return false

                    }
                }
            }
        })
    </script>
</body>

</html>